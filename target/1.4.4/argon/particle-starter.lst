
/home/luexiong/projects/particle-starter/target/1.4.4/argon/particle-starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001ed4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00015f88  2**0
                  CONTENTS
  4 .data         0000006c  2003e350  000d5ef0  0000e350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000434  2003e3bc  2003e3bc  0001e3bc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5f5c  000d5f5c  00015f5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5f84  000d5f84  00015f84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ec919  00000000  00000000  00015f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000127c4  00000000  00000000  001028a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002760  00000000  00000000  00115065  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000355a4  00000000  00000000  001177c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002b318  00000000  00000000  0014cd69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010ba2e  00000000  00000000  00178081  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000212d2  00000000  00000000  00283aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004b78  00000000  00000000  002a4d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d478  00000000  00000000  002a98fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd0b 	bl	d5a48 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd10 	bl	d5a5e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e350 	.word	0x2003e350
   d4048:	000d5ef0 	.word	0x000d5ef0
   d404c:	2003e3bc 	.word	0x2003e3bc
   d4050:	2003e3bc 	.word	0x2003e3bc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f8b9 	bl	d51d0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5eec 	.word	0x000d5eec
   d4080:	000d5eb0 	.word	0x000d5eb0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f83b 	bl	d4104 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b86b 	b.w	d516c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba51 	b.w	d453c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba57 	b.w	d454c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba55 	b.w	d454c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
int led1 = D0;
int led2 = D7;

void setup() {
   d40b4:	b508      	push	{r3, lr}
  pinMode(led1, OUTPUT);
   d40b6:	4b06      	ldr	r3, [pc, #24]	; (d40d0 <setup+0x1c>)
   d40b8:	2101      	movs	r1, #1
   d40ba:	8818      	ldrh	r0, [r3, #0]
   d40bc:	f001 fb3a 	bl	d5734 <pinMode>
  pinMode(led2, OUTPUT);
   d40c0:	4b04      	ldr	r3, [pc, #16]	; (d40d4 <setup+0x20>)
   d40c2:	2101      	movs	r1, #1
   d40c4:	8818      	ldrh	r0, [r3, #0]
}
   d40c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
int led1 = D0;
int led2 = D7;

void setup() {
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
   d40ca:	f001 bb33 	b.w	d5734 <pinMode>
   d40ce:	bf00      	nop
   d40d0:	2003e3c0 	.word	0x2003e3c0
   d40d4:	2003e350 	.word	0x2003e350

000d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40d8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40da:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40dc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40de:	b17c      	cbz	r4, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40e0:	6863      	ldr	r3, [r4, #4]
   d40e2:	3b01      	subs	r3, #1
   d40e4:	6063      	str	r3, [r4, #4]
   d40e6:	b95b      	cbnz	r3, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	4620      	mov	r0, r4
   d40ec:	689b      	ldr	r3, [r3, #8]
   d40ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40f0:	68a3      	ldr	r3, [r4, #8]
   d40f2:	3b01      	subs	r3, #1
   d40f4:	60a3      	str	r3, [r4, #8]
   d40f6:	b91b      	cbnz	r3, d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40f8:	6823      	ldr	r3, [r4, #0]
   d40fa:	4620      	mov	r0, r4
   d40fc:	68db      	ldr	r3, [r3, #12]
   d40fe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4100:	4628      	mov	r0, r5
   d4102:	bd38      	pop	{r3, r4, r5, pc}

000d4104 <loop>:
}

void loop() {
   d4104:	b530      	push	{r4, r5, lr}
  digitalWrite(led1, HIGH);
   d4106:	4d22      	ldr	r5, [pc, #136]	; (d4190 <loop+0x8c>)
  digitalWrite(led2, HIGH);
   d4108:	4c22      	ldr	r4, [pc, #136]	; (d4194 <loop+0x90>)
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
}

void loop() {
  digitalWrite(led1, HIGH);
   d410a:	8828      	ldrh	r0, [r5, #0]
void setup() {
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
}

void loop() {
   d410c:	b089      	sub	sp, #36	; 0x24
  digitalWrite(led1, HIGH);
   d410e:	2101      	movs	r1, #1
   d4110:	f001 fb21 	bl	d5756 <digitalWrite>
  digitalWrite(led2, HIGH);
   d4114:	2101      	movs	r1, #1
   d4116:	8820      	ldrh	r0, [r4, #0]
   d4118:	f001 fb1d 	bl	d5756 <digitalWrite>

  int randomNumber = random(100);
   d411c:	2064      	movs	r0, #100	; 0x64
   d411e:	f000 fbd3 	bl	d48c8 <_Z6randomi>
  int randomNumberDoubled = randomNumber * 2;

  if (randomNumber < 50) {
   d4122:	2831      	cmp	r0, #49	; 0x31

void loop() {
  digitalWrite(led1, HIGH);
  digitalWrite(led2, HIGH);

  int randomNumber = random(100);
   d4124:	4601      	mov	r1, r0
  int randomNumberDoubled = randomNumber * 2;

  if (randomNumber < 50) {
   d4126:	dc0b      	bgt.n	d4140 <loop+0x3c>
    Particle.publish("channel-one", String(randomNumber), 60, PRIVATE);
   d4128:	220a      	movs	r2, #10
   d412a:	a804      	add	r0, sp, #16
   d412c:	f001 fa88 	bl	d5640 <_ZN6StringC1Eih>
   d4130:	4b19      	ldr	r3, [pc, #100]	; (d4198 <loop+0x94>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4132:	9a04      	ldr	r2, [sp, #16]
   d4134:	781b      	ldrb	r3, [r3, #0]
   d4136:	f88d 3000 	strb.w	r3, [sp]
   d413a:	4918      	ldr	r1, [pc, #96]	; (d419c <loop+0x98>)
   d413c:	233c      	movs	r3, #60	; 0x3c
   d413e:	e00d      	b.n	d415c <loop+0x58>
  }

  if (randomNumber > 50) {
   d4140:	2832      	cmp	r0, #50	; 0x32
   d4142:	d014      	beq.n	d416e <loop+0x6a>
    Particle.publish("channel-two", String(randomNumberDoubled), 60, PRIVATE);
   d4144:	0041      	lsls	r1, r0, #1
   d4146:	220a      	movs	r2, #10
   d4148:	a804      	add	r0, sp, #16
   d414a:	f001 fa79 	bl	d5640 <_ZN6StringC1Eih>
   d414e:	4b12      	ldr	r3, [pc, #72]	; (d4198 <loop+0x94>)
   d4150:	9a04      	ldr	r2, [sp, #16]
   d4152:	781b      	ldrb	r3, [r3, #0]
   d4154:	4912      	ldr	r1, [pc, #72]	; (d41a0 <loop+0x9c>)
   d4156:	f88d 3000 	strb.w	r3, [sp]
   d415a:	233c      	movs	r3, #60	; 0x3c
   d415c:	a802      	add	r0, sp, #8
   d415e:	f000 fe65 	bl	d4e2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4162:	a803      	add	r0, sp, #12
   d4164:	f7ff ffb8 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4168:	a804      	add	r0, sp, #16
   d416a:	f001 fa11 	bl	d5590 <_ZN6StringD1Ev>
  }
  
  delay(100);
   d416e:	2064      	movs	r0, #100	; 0x64
   d4170:	f001 f85c 	bl	d522c <delay>

  digitalWrite(led1, LOW);
   d4174:	8828      	ldrh	r0, [r5, #0]
   d4176:	2100      	movs	r1, #0
   d4178:	f001 faed 	bl	d5756 <digitalWrite>
  digitalWrite(led2, LOW);
   d417c:	2100      	movs	r1, #0
   d417e:	8820      	ldrh	r0, [r4, #0]
   d4180:	f001 fae9 	bl	d5756 <digitalWrite>

  delay(1000);
   d4184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4188:	f001 f850 	bl	d522c <delay>
}
   d418c:	b009      	add	sp, #36	; 0x24
   d418e:	bd30      	pop	{r4, r5, pc}
   d4190:	2003e3c0 	.word	0x2003e3c0
   d4194:	2003e350 	.word	0x2003e350
   d4198:	2003e3c4 	.word	0x2003e3c4
   d419c:	000d5b90 	.word	0x000d5b90
   d41a0:	000d5b9c 	.word	0x000d5b9c

000d41a4 <_GLOBAL__sub_I_led1>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d41a4:	4b02      	ldr	r3, [pc, #8]	; (d41b0 <_GLOBAL__sub_I_led1+0xc>)
   d41a6:	2201      	movs	r2, #1
   d41a8:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41aa:	f000 b8fb 	b.w	d43a4 <HAL_Pin_Map>
   d41ae:	bf00      	nop
   d41b0:	2003e3c4 	.word	0x2003e3c4

000d41b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d41b4:	b508      	push	{r3, lr}
   d41b6:	4b02      	ldr	r3, [pc, #8]	; (d41c0 <HAL_USB_USART_Init+0xc>)
   d41b8:	681b      	ldr	r3, [r3, #0]
   d41ba:	681b      	ldr	r3, [r3, #0]
   d41bc:	9301      	str	r3, [sp, #4]
   d41be:	bd08      	pop	{r3, pc}
   d41c0:	0003024c 	.word	0x0003024c

000d41c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d41c4:	b508      	push	{r3, lr}
   d41c6:	4b02      	ldr	r3, [pc, #8]	; (d41d0 <HAL_USB_USART_Available_Data+0xc>)
   d41c8:	681b      	ldr	r3, [r3, #0]
   d41ca:	691b      	ldr	r3, [r3, #16]
   d41cc:	9301      	str	r3, [sp, #4]
   d41ce:	bd08      	pop	{r3, pc}
   d41d0:	0003024c 	.word	0x0003024c

000d41d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d41d4:	b508      	push	{r3, lr}
   d41d6:	4b02      	ldr	r3, [pc, #8]	; (d41e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d41d8:	681b      	ldr	r3, [r3, #0]
   d41da:	695b      	ldr	r3, [r3, #20]
   d41dc:	9301      	str	r3, [sp, #4]
   d41de:	bd08      	pop	{r3, pc}
   d41e0:	0003024c 	.word	0x0003024c

000d41e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d41e4:	b508      	push	{r3, lr}
   d41e6:	4b02      	ldr	r3, [pc, #8]	; (d41f0 <HAL_USB_USART_Receive_Data+0xc>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	699b      	ldr	r3, [r3, #24]
   d41ec:	9301      	str	r3, [sp, #4]
   d41ee:	bd08      	pop	{r3, pc}
   d41f0:	0003024c 	.word	0x0003024c

000d41f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d41f4:	b508      	push	{r3, lr}
   d41f6:	4b02      	ldr	r3, [pc, #8]	; (d4200 <HAL_USB_USART_Send_Data+0xc>)
   d41f8:	681b      	ldr	r3, [r3, #0]
   d41fa:	69db      	ldr	r3, [r3, #28]
   d41fc:	9301      	str	r3, [sp, #4]
   d41fe:	bd08      	pop	{r3, pc}
   d4200:	0003024c 	.word	0x0003024c

000d4204 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4204:	b508      	push	{r3, lr}
   d4206:	4b02      	ldr	r3, [pc, #8]	; (d4210 <HAL_USB_USART_Flush_Data+0xc>)
   d4208:	681b      	ldr	r3, [r3, #0]
   d420a:	6a1b      	ldr	r3, [r3, #32]
   d420c:	9301      	str	r3, [sp, #4]
   d420e:	bd08      	pop	{r3, pc}
   d4210:	0003024c 	.word	0x0003024c

000d4214 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4214:	b508      	push	{r3, lr}
   d4216:	4b02      	ldr	r3, [pc, #8]	; (d4220 <HAL_I2C_Write_Data+0xc>)
   d4218:	681b      	ldr	r3, [r3, #0]
   d421a:	6a1b      	ldr	r3, [r3, #32]
   d421c:	9301      	str	r3, [sp, #4]
   d421e:	bd08      	pop	{r3, pc}
   d4220:	00030228 	.word	0x00030228

000d4224 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4224:	b508      	push	{r3, lr}
   d4226:	4b02      	ldr	r3, [pc, #8]	; (d4230 <HAL_I2C_Available_Data+0xc>)
   d4228:	681b      	ldr	r3, [r3, #0]
   d422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d422c:	9301      	str	r3, [sp, #4]
   d422e:	bd08      	pop	{r3, pc}
   d4230:	00030228 	.word	0x00030228

000d4234 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4234:	b508      	push	{r3, lr}
   d4236:	4b02      	ldr	r3, [pc, #8]	; (d4240 <HAL_I2C_Read_Data+0xc>)
   d4238:	681b      	ldr	r3, [r3, #0]
   d423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d423c:	9301      	str	r3, [sp, #4]
   d423e:	bd08      	pop	{r3, pc}
   d4240:	00030228 	.word	0x00030228

000d4244 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4244:	b508      	push	{r3, lr}
   d4246:	4b02      	ldr	r3, [pc, #8]	; (d4250 <HAL_I2C_Peek_Data+0xc>)
   d4248:	681b      	ldr	r3, [r3, #0]
   d424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d424c:	9301      	str	r3, [sp, #4]
   d424e:	bd08      	pop	{r3, pc}
   d4250:	00030228 	.word	0x00030228

000d4254 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <HAL_I2C_Flush_Data+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	00030228 	.word	0x00030228

000d4264 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <HAL_I2C_Is_Enabled+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	00030228 	.word	0x00030228

000d4274 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <HAL_I2C_Init+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030228 	.word	0x00030228

000d4284 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <HAL_USART_Init+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	681b      	ldr	r3, [r3, #0]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	0003023c 	.word	0x0003023c

000d4294 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <HAL_USART_Write_Data+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	68db      	ldr	r3, [r3, #12]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	0003023c 	.word	0x0003023c

000d42a4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <HAL_USART_Available_Data+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	691b      	ldr	r3, [r3, #16]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	0003023c 	.word	0x0003023c

000d42b4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <HAL_USART_Read_Data+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	695b      	ldr	r3, [r3, #20]
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	0003023c 	.word	0x0003023c

000d42c4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <HAL_USART_Peek_Data+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	699b      	ldr	r3, [r3, #24]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	0003023c 	.word	0x0003023c

000d42d4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <HAL_USART_Flush_Data+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	69db      	ldr	r3, [r3, #28]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	0003023c 	.word	0x0003023c

000d42e4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <HAL_USART_Is_Enabled+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	6a1b      	ldr	r3, [r3, #32]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	0003023c 	.word	0x0003023c

000d42f4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <HAL_USART_Available_Data_For_Write+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	0003023c 	.word	0x0003023c

000d4304 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <inet_inet_ntop+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	695b      	ldr	r3, [r3, #20]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	00030264 	.word	0x00030264

000d4314 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <os_thread_is_current+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	689b      	ldr	r3, [r3, #8]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030248 	.word	0x00030248

000d4324 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <os_thread_join+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	691b      	ldr	r3, [r3, #16]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030248 	.word	0x00030248

000d4334 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <os_thread_cleanup+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	695b      	ldr	r3, [r3, #20]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030248 	.word	0x00030248

000d4344 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <os_mutex_create+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030248 	.word	0x00030248

000d4354 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <os_mutex_recursive_create+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030248 	.word	0x00030248

000d4364 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_RNG_GetRandomNumber+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	685b      	ldr	r3, [r3, #4]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030218 	.word	0x00030218

000d4374 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	695b      	ldr	r3, [r3, #20]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030218 	.word	0x00030218

000d4384 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_SPI_Init+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	69db      	ldr	r3, [r3, #28]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030230 	.word	0x00030230

000d4394 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_SPI_Is_Enabled+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6a1b      	ldr	r3, [r3, #32]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030230 	.word	0x00030230

000d43a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_Pin_Map+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	681b      	ldr	r3, [r3, #0]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003022c 	.word	0x0003022c

000d43b4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_Pin_Mode+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	689b      	ldr	r3, [r3, #8]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003022c 	.word	0x0003022c

000d43c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_Get_Pin_Mode+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	68db      	ldr	r3, [r3, #12]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003022c 	.word	0x0003022c

000d43d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_GPIO_Write+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	691b      	ldr	r3, [r3, #16]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003022c 	.word	0x0003022c

000d43e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <netdb_freeaddrinfo+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	689b      	ldr	r3, [r3, #8]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030268 	.word	0x00030268

000d43f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <netdb_getaddrinfo+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	68db      	ldr	r3, [r3, #12]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030268 	.word	0x00030268

000d4404 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <spark_cloud_flag_connected+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	695b      	ldr	r3, [r3, #20]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030244 	.word	0x00030244

000d4414 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <spark_send_event+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	6a1b      	ldr	r3, [r3, #32]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030244 	.word	0x00030244

000d4424 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030244 	.word	0x00030244

000d4434 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <network_connect+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	685b      	ldr	r3, [r3, #4]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030240 	.word	0x00030240

000d4444 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <network_connecting+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	689b      	ldr	r3, [r3, #8]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030240 	.word	0x00030240

000d4454 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <network_disconnect+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	68db      	ldr	r3, [r3, #12]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030240 	.word	0x00030240

000d4464 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <network_ready+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	691b      	ldr	r3, [r3, #16]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030240 	.word	0x00030240

000d4474 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <network_on+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	695b      	ldr	r3, [r3, #20]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030240 	.word	0x00030240

000d4484 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <network_off+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	699b      	ldr	r3, [r3, #24]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030240 	.word	0x00030240

000d4494 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_listen+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	69db      	ldr	r3, [r3, #28]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_listening+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6a1b      	ldr	r3, [r3, #32]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_set_listen_timeout+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_get_listen_timeout+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <set_system_mode+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	685b      	ldr	r3, [r3, #4]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030220 	.word	0x00030220

000d44e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <system_delay_ms+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030220 	.word	0x00030220

000d44f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <application_thread_current+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030220 	.word	0x00030220

000d4504 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <application_thread_invoke+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030220 	.word	0x00030220

000d4514 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b03      	ldr	r3, [pc, #12]	; (d4524 <system_ctrl_set_app_request_handler+0x10>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d451e:	9301      	str	r3, [sp, #4]
   d4520:	bd08      	pop	{r3, pc}
   d4522:	0000      	.short	0x0000
   d4524:	00030220 	.word	0x00030220

000d4528 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b03      	ldr	r3, [pc, #12]	; (d4538 <system_ctrl_set_result+0x10>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4532:	9301      	str	r3, [sp, #4]
   d4534:	bd08      	pop	{r3, pc}
   d4536:	0000      	.short	0x0000
   d4538:	00030220 	.word	0x00030220

000d453c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <malloc+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	681b      	ldr	r3, [r3, #0]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003021c 	.word	0x0003021c

000d454c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <free+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	685b      	ldr	r3, [r3, #4]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003021c 	.word	0x0003021c

000d455c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <realloc+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	689b      	ldr	r3, [r3, #8]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003021c 	.word	0x0003021c

000d456c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <abort+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003021c 	.word	0x0003021c

000d457c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <_malloc_r+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003021c 	.word	0x0003021c

000d458c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d458c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d458e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4590:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4592:	b113      	cbz	r3, d459a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4594:	2203      	movs	r2, #3
   d4596:	4601      	mov	r1, r0
   d4598:	4798      	blx	r3
    }
   d459a:	4620      	mov	r0, r4
   d459c:	bd10      	pop	{r4, pc}

000d459e <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d459e:	2300      	movs	r3, #0
   d45a0:	461a      	mov	r2, r3
   d45a2:	6840      	ldr	r0, [r0, #4]
   d45a4:	f7ff bf46 	b.w	d4434 <network_connect>

000d45a8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d45a8:	2200      	movs	r2, #0
   d45aa:	2102      	movs	r1, #2
   d45ac:	6840      	ldr	r0, [r0, #4]
   d45ae:	f7ff bf51 	b.w	d4454 <network_disconnect>

000d45b2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d45b2:	2200      	movs	r2, #0
   d45b4:	4611      	mov	r1, r2
   d45b6:	6840      	ldr	r0, [r0, #4]
   d45b8:	f7ff bf44 	b.w	d4444 <network_connecting>

000d45bc <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d45bc:	2200      	movs	r2, #0
   d45be:	4611      	mov	r1, r2
   d45c0:	6840      	ldr	r0, [r0, #4]
   d45c2:	f7ff bf4f 	b.w	d4464 <network_ready>

000d45c6 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d45c6:	2300      	movs	r3, #0
   d45c8:	461a      	mov	r2, r3
   d45ca:	4619      	mov	r1, r3
   d45cc:	6840      	ldr	r0, [r0, #4]
   d45ce:	f7ff bf51 	b.w	d4474 <network_on>

000d45d2 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d45d2:	2300      	movs	r3, #0
   d45d4:	461a      	mov	r2, r3
   d45d6:	4619      	mov	r1, r3
   d45d8:	6840      	ldr	r0, [r0, #4]
   d45da:	f7ff bf53 	b.w	d4484 <network_off>

000d45de <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d45de:	2200      	movs	r2, #0
   d45e0:	f081 0101 	eor.w	r1, r1, #1
   d45e4:	6840      	ldr	r0, [r0, #4]
   d45e6:	f7ff bf55 	b.w	d4494 <network_listen>

000d45ea <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d45ea:	2200      	movs	r2, #0
   d45ec:	6840      	ldr	r0, [r0, #4]
   d45ee:	f7ff bf61 	b.w	d44b4 <network_set_listen_timeout>

000d45f2 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d45f2:	2200      	movs	r2, #0
   d45f4:	4611      	mov	r1, r2
   d45f6:	6840      	ldr	r0, [r0, #4]
   d45f8:	f7ff bf64 	b.w	d44c4 <network_get_listen_timeout>

000d45fc <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d45fc:	2200      	movs	r2, #0
   d45fe:	4611      	mov	r1, r2
   d4600:	6840      	ldr	r0, [r0, #4]
   d4602:	f7ff bf4f 	b.w	d44a4 <network_listening>

000d4606 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d460a:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d460c:	b095      	sub	sp, #84	; 0x54
   d460e:	4616      	mov	r6, r2
   d4610:	460d      	mov	r5, r1
   d4612:	4607      	mov	r7, r0
    IPAddress addr;
   d4614:	f000 fa80 	bl	d4b18 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4618:	4621      	mov	r1, r4
   d461a:	2220      	movs	r2, #32
   d461c:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d461e:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4620:	f001 fa1d 	bl	d5a5e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4624:	2340      	movs	r3, #64	; 0x40
   d4626:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4628:	4621      	mov	r1, r4
   d462a:	466b      	mov	r3, sp
   d462c:	aa0c      	add	r2, sp, #48	; 0x30
   d462e:	4630      	mov	r0, r6
   d4630:	f7ff fee0 	bl	d43f4 <netdb_getaddrinfo>
    if (!r) {
   d4634:	4604      	mov	r4, r0
   d4636:	2800      	cmp	r0, #0
   d4638:	d144      	bne.n	d46c4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d463a:	4602      	mov	r2, r0
   d463c:	2101      	movs	r1, #1
   d463e:	6868      	ldr	r0, [r5, #4]
   d4640:	f7ff ff10 	bl	d4464 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4644:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4646:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4648:	4622      	mov	r2, r4
   d464a:	6868      	ldr	r0, [r5, #4]
   d464c:	f7ff ff0a 	bl	d4464 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4650:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4652:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4654:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4656:	2e00      	cmp	r6, #0
   d4658:	d034      	beq.n	d46c4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d465a:	2900      	cmp	r1, #0
   d465c:	d132      	bne.n	d46c4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d465e:	6873      	ldr	r3, [r6, #4]
   d4660:	2b02      	cmp	r3, #2
   d4662:	d002      	beq.n	d466a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4664:	2b0a      	cmp	r3, #10
   d4666:	d009      	beq.n	d467c <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4668:	e02a      	b.n	d46c0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d466a:	f1b8 0f00 	cmp.w	r8, #0
   d466e:	d027      	beq.n	d46c0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4670:	6971      	ldr	r1, [r6, #20]
   d4672:	4638      	mov	r0, r7
   d4674:	3104      	adds	r1, #4
   d4676:	f000 fa7c 	bl	d4b72 <_ZN9IPAddressaSEPKh>
   d467a:	e020      	b.n	d46be <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d467c:	f1b9 0f00 	cmp.w	r9, #0
   d4680:	d01e      	beq.n	d46c0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4682:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4684:	2211      	movs	r2, #17
   d4686:	a801      	add	r0, sp, #4
   d4688:	f001 f9e9 	bl	d5a5e <memset>
                    a.v = 6;
   d468c:	2306      	movs	r3, #6
   d468e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4692:	ad01      	add	r5, sp, #4
   d4694:	f104 0308 	add.w	r3, r4, #8
   d4698:	3418      	adds	r4, #24
   d469a:	6818      	ldr	r0, [r3, #0]
   d469c:	6859      	ldr	r1, [r3, #4]
   d469e:	462a      	mov	r2, r5
   d46a0:	c203      	stmia	r2!, {r0, r1}
   d46a2:	3308      	adds	r3, #8
   d46a4:	42a3      	cmp	r3, r4
   d46a6:	4615      	mov	r5, r2
   d46a8:	d1f7      	bne.n	d469a <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d46aa:	a901      	add	r1, sp, #4
   d46ac:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d46ae:	ad07      	add	r5, sp, #28
   d46b0:	f000 fa40 	bl	d4b34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d46b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d46b6:	1d3c      	adds	r4, r7, #4
   d46b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d46ba:	682b      	ldr	r3, [r5, #0]
   d46bc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d46be:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d46c0:	69f6      	ldr	r6, [r6, #28]
   d46c2:	e7c8      	b.n	d4656 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d46c4:	9800      	ldr	r0, [sp, #0]
   d46c6:	f7ff fe8d 	bl	d43e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d46ca:	4638      	mov	r0, r7
   d46cc:	b015      	add	sp, #84	; 0x54
   d46ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d46d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46d4:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d46d6:	4a03      	ldr	r2, [pc, #12]	; (d46e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d46d8:	601a      	str	r2, [r3, #0]
   d46da:	2200      	movs	r2, #0
   d46dc:	605a      	str	r2, [r3, #4]
   d46de:	4770      	bx	lr
   d46e0:	2003e3c8 	.word	0x2003e3c8
   d46e4:	000d5bb0 	.word	0x000d5bb0

000d46e8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d46e8:	2200      	movs	r2, #0
   d46ea:	4611      	mov	r1, r2
   d46ec:	6840      	ldr	r0, [r0, #4]
   d46ee:	f7ff beb9 	b.w	d4464 <network_ready>

000d46f2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46f2:	2200      	movs	r2, #0
   d46f4:	4611      	mov	r1, r2
   d46f6:	6840      	ldr	r0, [r0, #4]
   d46f8:	f7ff bed4 	b.w	d44a4 <network_listening>

000d46fc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46fc:	2200      	movs	r2, #0
   d46fe:	4611      	mov	r1, r2
   d4700:	6840      	ldr	r0, [r0, #4]
   d4702:	f7ff bedf 	b.w	d44c4 <network_get_listen_timeout>

000d4706 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4706:	2200      	movs	r2, #0
   d4708:	6840      	ldr	r0, [r0, #4]
   d470a:	f7ff bed3 	b.w	d44b4 <network_set_listen_timeout>

000d470e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d470e:	2200      	movs	r2, #0
   d4710:	f081 0101 	eor.w	r1, r1, #1
   d4714:	6840      	ldr	r0, [r0, #4]
   d4716:	f7ff bebd 	b.w	d4494 <network_listen>

000d471a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d471a:	2300      	movs	r3, #0
   d471c:	461a      	mov	r2, r3
   d471e:	4619      	mov	r1, r3
   d4720:	6840      	ldr	r0, [r0, #4]
   d4722:	f7ff beaf 	b.w	d4484 <network_off>

000d4726 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4726:	2300      	movs	r3, #0
   d4728:	461a      	mov	r2, r3
   d472a:	4619      	mov	r1, r3
   d472c:	6840      	ldr	r0, [r0, #4]
   d472e:	f7ff bea1 	b.w	d4474 <network_on>

000d4732 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4732:	2200      	movs	r2, #0
   d4734:	4611      	mov	r1, r2
   d4736:	6840      	ldr	r0, [r0, #4]
   d4738:	f7ff be84 	b.w	d4444 <network_connecting>

000d473c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d473c:	2200      	movs	r2, #0
   d473e:	2102      	movs	r1, #2
   d4740:	6840      	ldr	r0, [r0, #4]
   d4742:	f7ff be87 	b.w	d4454 <network_disconnect>

000d4746 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4746:	2300      	movs	r3, #0
   d4748:	461a      	mov	r2, r3
   d474a:	6840      	ldr	r0, [r0, #4]
   d474c:	f7ff be72 	b.w	d4434 <network_connect>

000d4750 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4750:	4b02      	ldr	r3, [pc, #8]	; (d475c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4752:	2204      	movs	r2, #4
   d4754:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4756:	4a02      	ldr	r2, [pc, #8]	; (d4760 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4758:	601a      	str	r2, [r3, #0]
   d475a:	4770      	bx	lr
   d475c:	2003e3d0 	.word	0x2003e3d0
   d4760:	000d5be4 	.word	0x000d5be4

000d4764 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4764:	2200      	movs	r2, #0
   d4766:	4611      	mov	r1, r2
   d4768:	6840      	ldr	r0, [r0, #4]
   d476a:	f7ff be9b 	b.w	d44a4 <network_listening>

000d476e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d476e:	2200      	movs	r2, #0
   d4770:	4611      	mov	r1, r2
   d4772:	6840      	ldr	r0, [r0, #4]
   d4774:	f7ff bea6 	b.w	d44c4 <network_get_listen_timeout>

000d4778 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4778:	2200      	movs	r2, #0
   d477a:	6840      	ldr	r0, [r0, #4]
   d477c:	f7ff be9a 	b.w	d44b4 <network_set_listen_timeout>

000d4780 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4780:	2200      	movs	r2, #0
   d4782:	f081 0101 	eor.w	r1, r1, #1
   d4786:	6840      	ldr	r0, [r0, #4]
   d4788:	f7ff be84 	b.w	d4494 <network_listen>

000d478c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d478c:	2300      	movs	r3, #0
   d478e:	461a      	mov	r2, r3
   d4790:	2101      	movs	r1, #1
   d4792:	6840      	ldr	r0, [r0, #4]
   d4794:	f7ff be76 	b.w	d4484 <network_off>

000d4798 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4798:	2300      	movs	r3, #0
   d479a:	461a      	mov	r2, r3
   d479c:	4619      	mov	r1, r3
   d479e:	6840      	ldr	r0, [r0, #4]
   d47a0:	f7ff be68 	b.w	d4474 <network_on>

000d47a4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47a4:	2200      	movs	r2, #0
   d47a6:	4611      	mov	r1, r2
   d47a8:	6840      	ldr	r0, [r0, #4]
   d47aa:	f7ff be5b 	b.w	d4464 <network_ready>

000d47ae <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d47ae:	2200      	movs	r2, #0
   d47b0:	4611      	mov	r1, r2
   d47b2:	6840      	ldr	r0, [r0, #4]
   d47b4:	f7ff be46 	b.w	d4444 <network_connecting>

000d47b8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47b8:	2200      	movs	r2, #0
   d47ba:	2102      	movs	r1, #2
   d47bc:	6840      	ldr	r0, [r0, #4]
   d47be:	f7ff be49 	b.w	d4454 <network_disconnect>

000d47c2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d47c2:	2300      	movs	r3, #0
   d47c4:	461a      	mov	r2, r3
   d47c6:	6840      	ldr	r0, [r0, #4]
   d47c8:	f7ff be34 	b.w	d4434 <network_connect>

000d47cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d47cc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d47ce:	4605      	mov	r5, r0
   d47d0:	b188      	cbz	r0, d47f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d47d2:	6804      	ldr	r4, [r0, #0]
   d47d4:	b14c      	cbz	r4, d47ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d47d6:	68a3      	ldr	r3, [r4, #8]
   d47d8:	b11b      	cbz	r3, d47e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47da:	2203      	movs	r2, #3
   d47dc:	4621      	mov	r1, r4
   d47de:	4620      	mov	r0, r4
   d47e0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d47e2:	2110      	movs	r1, #16
   d47e4:	4620      	mov	r0, r4
   d47e6:	f000 ffd4 	bl	d5792 <_ZdlPvj>
   d47ea:	4628      	mov	r0, r5
   d47ec:	2114      	movs	r1, #20
      }
   d47ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d47f2:	f000 bfce 	b.w	d5792 <_ZdlPvj>
   d47f6:	bd38      	pop	{r3, r4, r5, pc}

000d47f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d47f8:	b110      	cbz	r0, d4800 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d47fa:	6803      	ldr	r3, [r0, #0]
   d47fc:	685b      	ldr	r3, [r3, #4]
   d47fe:	4718      	bx	r3
   d4800:	4770      	bx	lr

000d4802 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4802:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4804:	6803      	ldr	r3, [r0, #0]
   d4806:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4808:	b1bb      	cbz	r3, d483a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d480a:	6858      	ldr	r0, [r3, #4]
   d480c:	f7ff fd82 	bl	d4314 <os_thread_is_current>
   d4810:	b978      	cbnz	r0, d4832 <_ZN6ThreadD1Ev+0x30>
   d4812:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4814:	7c5a      	ldrb	r2, [r3, #17]
   d4816:	b912      	cbnz	r2, d481e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4818:	6858      	ldr	r0, [r3, #4]
   d481a:	f7ff fd83 	bl	d4324 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d481e:	6823      	ldr	r3, [r4, #0]
   d4820:	6858      	ldr	r0, [r3, #4]
   d4822:	f7ff fd87 	bl	d4334 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4826:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4828:	2300      	movs	r3, #0
   d482a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d482c:	b128      	cbz	r0, d483a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d482e:	f7ff ffcd 	bl	d47cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4832:	6820      	ldr	r0, [r4, #0]
   d4834:	b108      	cbz	r0, d483a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4836:	f7ff ffc9 	bl	d47cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d483a:	4620      	mov	r0, r4
   d483c:	bd10      	pop	{r4, pc}
	...

000d4840 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4840:	b538      	push	{r3, r4, r5, lr}
   d4842:	4b0c      	ldr	r3, [pc, #48]	; (d4874 <_ZN5spark9MeshClassD1Ev+0x34>)
   d4844:	6003      	str	r3, [r0, #0]
   d4846:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4848:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d484c:	b108      	cbz	r0, d4852 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d484e:	f7ff fc26 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4852:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4856:	b135      	cbz	r5, d4866 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4858:	4628      	mov	r0, r5
   d485a:	f7ff ffd2 	bl	d4802 <_ZN6ThreadD1Ev>
   d485e:	2104      	movs	r1, #4
   d4860:	4628      	mov	r0, r5
   d4862:	f000 ff96 	bl	d5792 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4866:	68a0      	ldr	r0, [r4, #8]
   d4868:	b108      	cbz	r0, d486e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d486a:	f7ff ffc5 	bl	d47f8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d486e:	4620      	mov	r0, r4
   d4870:	bd38      	pop	{r3, r4, r5, pc}
   d4872:	bf00      	nop
   d4874:	000d5c18 	.word	0x000d5c18

000d4878 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4878:	b538      	push	{r3, r4, r5, lr}
   d487a:	4c0e      	ldr	r4, [pc, #56]	; (d48b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d487c:	4b0e      	ldr	r3, [pc, #56]	; (d48b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d487e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4880:	2500      	movs	r5, #0
   d4882:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4884:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4888:	6063      	str	r3, [r4, #4]
   d488a:	60a5      	str	r5, [r4, #8]
   d488c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4890:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4894:	f7ff fd5e 	bl	d4354 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4898:	4b08      	ldr	r3, [pc, #32]	; (d48bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d489a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d489e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d48a2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d48a4:	4620      	mov	r0, r4
   d48a6:	4a06      	ldr	r2, [pc, #24]	; (d48c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d48a8:	4906      	ldr	r1, [pc, #24]	; (d48c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d48aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d48ae:	f000 bf6b 	b.w	d5788 <__aeabi_atexit>
   d48b2:	bf00      	nop
   d48b4:	2003e3d8 	.word	0x2003e3d8
   d48b8:	000d5bb0 	.word	0x000d5bb0
   d48bc:	000d5c18 	.word	0x000d5c18
   d48c0:	2003e3bc 	.word	0x2003e3bc
   d48c4:	000d4841 	.word	0x000d4841

000d48c8 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d48c8:	b510      	push	{r4, lr}
  if (0 == max) {
   d48ca:	4604      	mov	r4, r0
   d48cc:	b130      	cbz	r0, d48dc <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d48ce:	f001 f8f7 	bl	d5ac0 <rand>
   d48d2:	fb90 f3f4 	sdiv	r3, r0, r4
   d48d6:	fb03 0014 	mls	r0, r3, r4, r0
   d48da:	bd10      	pop	{r4, pc}
}
   d48dc:	bd10      	pop	{r4, pc}

000d48de <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d48de:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d48e0:	6883      	ldr	r3, [r0, #8]
   d48e2:	4604      	mov	r4, r0
   d48e4:	b90b      	cbnz	r3, d48ea <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d48e6:	f000 ff56 	bl	d5796 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48ea:	68c3      	ldr	r3, [r0, #12]
   d48ec:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d48ee:	68a3      	ldr	r3, [r4, #8]
   d48f0:	b11b      	cbz	r3, d48fa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48f2:	2203      	movs	r2, #3
   d48f4:	4621      	mov	r1, r4
   d48f6:	4620      	mov	r0, r4
   d48f8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d48fa:	4620      	mov	r0, r4
   d48fc:	2110      	movs	r1, #16
}
   d48fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4902:	f000 bf46 	b.w	d5792 <_ZdlPvj>

000d4906 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4906:	4770      	bx	lr

000d4908 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d490a:	4606      	mov	r6, r0
   d490c:	4615      	mov	r5, r2
   d490e:	460c      	mov	r4, r1
   d4910:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4912:	42bc      	cmp	r4, r7
   d4914:	d006      	beq.n	d4924 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4916:	6833      	ldr	r3, [r6, #0]
   d4918:	f814 1b01 	ldrb.w	r1, [r4], #1
   d491c:	689b      	ldr	r3, [r3, #8]
   d491e:	4630      	mov	r0, r6
   d4920:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4922:	e7f6      	b.n	d4912 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4924:	4628      	mov	r0, r5
   d4926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4928 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4928:	2200      	movs	r2, #0
   d492a:	7c00      	ldrb	r0, [r0, #16]
   d492c:	f7ff bc72 	b.w	d4214 <HAL_I2C_Write_Data>

000d4930 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4930:	2100      	movs	r1, #0
   d4932:	7c00      	ldrb	r0, [r0, #16]
   d4934:	f7ff bc76 	b.w	d4224 <HAL_I2C_Available_Data>

000d4938 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4938:	2100      	movs	r1, #0
   d493a:	7c00      	ldrb	r0, [r0, #16]
   d493c:	f7ff bc7a 	b.w	d4234 <HAL_I2C_Read_Data>

000d4940 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4940:	2100      	movs	r1, #0
   d4942:	7c00      	ldrb	r0, [r0, #16]
   d4944:	f7ff bc7e 	b.w	d4244 <HAL_I2C_Peek_Data>

000d4948 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4948:	2100      	movs	r1, #0
   d494a:	7c00      	ldrb	r0, [r0, #16]
   d494c:	f7ff bc82 	b.w	d4254 <HAL_I2C_Flush_Data>

000d4950 <_ZN7TwoWireD0Ev>:
   d4950:	b510      	push	{r4, lr}
   d4952:	2114      	movs	r1, #20
   d4954:	4604      	mov	r4, r0
   d4956:	f000 ff1c 	bl	d5792 <_ZdlPvj>
   d495a:	4620      	mov	r0, r4
   d495c:	bd10      	pop	{r4, pc}
	...

000d4960 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4960:	b510      	push	{r4, lr}
   d4962:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4968:	4608      	mov	r0, r1
   d496a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d496c:	2100      	movs	r1, #0
   d496e:	4b04      	ldr	r3, [pc, #16]	; (d4980 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4970:	7420      	strb	r0, [r4, #16]
   d4972:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4974:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4976:	f7ff fc7d 	bl	d4274 <HAL_I2C_Init>

}
   d497a:	4620      	mov	r0, r4
   d497c:	bd10      	pop	{r4, pc}
   d497e:	bf00      	nop
   d4980:	000d5c4c 	.word	0x000d5c4c

000d4984 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4984:	2100      	movs	r1, #0
   d4986:	7c00      	ldrb	r0, [r0, #16]
   d4988:	f7ff bc6c 	b.w	d4264 <HAL_I2C_Is_Enabled>

000d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d498c:	680b      	ldr	r3, [r1, #0]
   d498e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4990:	b113      	cbz	r3, d4998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4992:	685a      	ldr	r2, [r3, #4]
   d4994:	3201      	adds	r2, #1
   d4996:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4998:	4770      	bx	lr

000d499a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d499a:	7441      	strb	r1, [r0, #17]
   d499c:	4770      	bx	lr

000d499e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d499e:	4770      	bx	lr

000d49a0 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d49a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d49a2:	2100      	movs	r1, #0
   d49a4:	7c00      	ldrb	r0, [r0, #16]
   d49a6:	f7ff fc1d 	bl	d41e4 <HAL_USB_USART_Receive_Data>
}
   d49aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d49ae:	bf28      	it	cs
   d49b0:	f04f 30ff 	movcs.w	r0, #4294967295
   d49b4:	bd08      	pop	{r3, pc}

000d49b6 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d49b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d49b8:	2101      	movs	r1, #1
   d49ba:	7c00      	ldrb	r0, [r0, #16]
   d49bc:	f7ff fc12 	bl	d41e4 <HAL_USB_USART_Receive_Data>
}
   d49c0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d49c4:	bf28      	it	cs
   d49c6:	f04f 30ff 	movcs.w	r0, #4294967295
   d49ca:	bd08      	pop	{r3, pc}

000d49cc <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d49cc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d49ce:	7c00      	ldrb	r0, [r0, #16]
   d49d0:	f7ff fc00 	bl	d41d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d49d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49d8:	bd08      	pop	{r3, pc}

000d49da <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d49da:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d49dc:	7c00      	ldrb	r0, [r0, #16]
   d49de:	f7ff fbf1 	bl	d41c4 <HAL_USB_USART_Available_Data>
}
   d49e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49e6:	bd08      	pop	{r3, pc}

000d49e8 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d49e8:	7c00      	ldrb	r0, [r0, #16]
   d49ea:	f7ff bc0b 	b.w	d4204 <HAL_USB_USART_Flush_Data>

000d49ee <_ZN9USBSerialD0Ev>:
   d49ee:	b510      	push	{r4, lr}
   d49f0:	2114      	movs	r1, #20
   d49f2:	4604      	mov	r4, r0
   d49f4:	f000 fecd 	bl	d5792 <_ZdlPvj>
   d49f8:	4620      	mov	r0, r4
   d49fa:	bd10      	pop	{r4, pc}

000d49fc <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d49fc:	b538      	push	{r3, r4, r5, lr}
   d49fe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a00:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4a02:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4a04:	f7ff fbe6 	bl	d41d4 <HAL_USB_USART_Available_Data_For_Write>
   d4a08:	2800      	cmp	r0, #0
   d4a0a:	dc01      	bgt.n	d4a10 <_ZN9USBSerial5writeEh+0x14>
   d4a0c:	7c60      	ldrb	r0, [r4, #17]
   d4a0e:	b128      	cbz	r0, d4a1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4a10:	4629      	mov	r1, r5
   d4a12:	7c20      	ldrb	r0, [r4, #16]
   d4a14:	f7ff fbee 	bl	d41f4 <HAL_USB_USART_Send_Data>
   d4a18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4a1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4a20:	b510      	push	{r4, lr}
   d4a22:	4604      	mov	r4, r0
   d4a24:	2300      	movs	r3, #0
   d4a26:	6063      	str	r3, [r4, #4]
   d4a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a2c:	60a3      	str	r3, [r4, #8]
   d4a2e:	4b05      	ldr	r3, [pc, #20]	; (d4a44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4a30:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4a32:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4a34:	4608      	mov	r0, r1
{
  _serial = serial;
   d4a36:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4a38:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4a3a:	4611      	mov	r1, r2
   d4a3c:	f7ff fbba 	bl	d41b4 <HAL_USB_USART_Init>
}
   d4a40:	4620      	mov	r0, r4
   d4a42:	bd10      	pop	{r4, pc}
   d4a44:	000d5c74 	.word	0x000d5c74

000d4a48 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4a48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4a4a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4a4c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4a4e:	2100      	movs	r1, #0
   d4a50:	f001 f805 	bl	d5a5e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4a54:	4620      	mov	r0, r4
   d4a56:	bd10      	pop	{r4, pc}

000d4a58 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4a58:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a5a:	4d0e      	ldr	r5, [pc, #56]	; (d4a94 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4a5c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4a5e:	a801      	add	r0, sp, #4
   d4a60:	f7ff fff2 	bl	d4a48 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a64:	6829      	ldr	r1, [r5, #0]
   d4a66:	f011 0401 	ands.w	r4, r1, #1
   d4a6a:	d110      	bne.n	d4a8e <_Z16_fetch_usbserialv+0x36>
   d4a6c:	4628      	mov	r0, r5
   d4a6e:	f7ff fb18 	bl	d40a2 <__cxa_guard_acquire>
   d4a72:	b160      	cbz	r0, d4a8e <_Z16_fetch_usbserialv+0x36>
   d4a74:	aa01      	add	r2, sp, #4
   d4a76:	4621      	mov	r1, r4
   d4a78:	4807      	ldr	r0, [pc, #28]	; (d4a98 <_Z16_fetch_usbserialv+0x40>)
   d4a7a:	f7ff ffd1 	bl	d4a20 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4a7e:	4628      	mov	r0, r5
   d4a80:	f7ff fb14 	bl	d40ac <__cxa_guard_release>
   d4a84:	4a05      	ldr	r2, [pc, #20]	; (d4a9c <_Z16_fetch_usbserialv+0x44>)
   d4a86:	4906      	ldr	r1, [pc, #24]	; (d4aa0 <_Z16_fetch_usbserialv+0x48>)
   d4a88:	4803      	ldr	r0, [pc, #12]	; (d4a98 <_Z16_fetch_usbserialv+0x40>)
   d4a8a:	f000 fe7d 	bl	d5788 <__aeabi_atexit>
	return _usbserial;
}
   d4a8e:	4802      	ldr	r0, [pc, #8]	; (d4a98 <_Z16_fetch_usbserialv+0x40>)
   d4a90:	b007      	add	sp, #28
   d4a92:	bd30      	pop	{r4, r5, pc}
   d4a94:	2003e5ac 	.word	0x2003e5ac
   d4a98:	2003e5b0 	.word	0x2003e5b0
   d4a9c:	2003e3bc 	.word	0x2003e3bc
   d4aa0:	000d499f 	.word	0x000d499f

000d4aa4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4aa4:	4770      	bx	lr

000d4aa6 <_ZN9IPAddressD0Ev>:
   d4aa6:	b510      	push	{r4, lr}
   d4aa8:	2118      	movs	r1, #24
   d4aaa:	4604      	mov	r4, r0
   d4aac:	f000 fe71 	bl	d5792 <_ZdlPvj>
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	bd10      	pop	{r4, pc}

000d4ab4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4ab6:	7d03      	ldrb	r3, [r0, #20]
   d4ab8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4aba:	b08d      	sub	sp, #52	; 0x34
   d4abc:	460e      	mov	r6, r1
   d4abe:	f100 0704 	add.w	r7, r0, #4
   d4ac2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4ac6:	d002      	beq.n	d4ace <_ZNK9IPAddress7printToER5Print+0x1a>
   d4ac8:	f100 0508 	add.w	r5, r0, #8
   d4acc:	e018      	b.n	d4b00 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ace:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ad0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4ad2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4ad6:	232f      	movs	r3, #47	; 0x2f
   d4ad8:	462a      	mov	r2, r5
   d4ada:	200a      	movs	r0, #10
   d4adc:	f7ff fc12 	bl	d4304 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4ae0:	4628      	mov	r0, r5
   d4ae2:	f001 f842 	bl	d5b6a <strlen>
   d4ae6:	6833      	ldr	r3, [r6, #0]
   d4ae8:	4602      	mov	r2, r0
   d4aea:	68db      	ldr	r3, [r3, #12]
   d4aec:	4629      	mov	r1, r5
   d4aee:	4630      	mov	r0, r6
   d4af0:	4798      	blx	r3
   d4af2:	e00f      	b.n	d4b14 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4af4:	b124      	cbz	r4, d4b00 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4af6:	212e      	movs	r1, #46	; 0x2e
   d4af8:	4630      	mov	r0, r6
   d4afa:	f000 fbd3 	bl	d52a4 <_ZN5Print5printEc>
   d4afe:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4b00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b04:	220a      	movs	r2, #10
   d4b06:	4630      	mov	r0, r6
   d4b08:	f000 fbfc 	bl	d5304 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b0c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b0e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b10:	d1f0      	bne.n	d4af4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b12:	4620      	mov	r0, r4
    }
    return n;
}
   d4b14:	b00d      	add	sp, #52	; 0x34
   d4b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b18 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4b18:	b510      	push	{r4, lr}
   d4b1a:	4b05      	ldr	r3, [pc, #20]	; (d4b30 <_ZN9IPAddressC1Ev+0x18>)
   d4b1c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4b1e:	2211      	movs	r2, #17
   d4b20:	f840 3b04 	str.w	r3, [r0], #4
   d4b24:	2100      	movs	r1, #0
   d4b26:	f000 ff9a 	bl	d5a5e <memset>
{
    clear();
}
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	bd10      	pop	{r4, pc}
   d4b2e:	bf00      	nop
   d4b30:	000d5ca4 	.word	0x000d5ca4

000d4b34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4b34:	4603      	mov	r3, r0
   d4b36:	4a07      	ldr	r2, [pc, #28]	; (d4b54 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4b38:	b510      	push	{r4, lr}
   d4b3a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4b3e:	f101 0210 	add.w	r2, r1, #16
   d4b42:	f851 4b04 	ldr.w	r4, [r1], #4
   d4b46:	f843 4b04 	str.w	r4, [r3], #4
   d4b4a:	4291      	cmp	r1, r2
   d4b4c:	d1f9      	bne.n	d4b42 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4b4e:	780a      	ldrb	r2, [r1, #0]
   d4b50:	701a      	strb	r2, [r3, #0]
}
   d4b52:	bd10      	pop	{r4, pc}
   d4b54:	000d5ca4 	.word	0x000d5ca4

000d4b58 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4b58:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4b5a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b5e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b66:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4b6a:	2304      	movs	r3, #4
   d4b6c:	6041      	str	r1, [r0, #4]
   d4b6e:	7503      	strb	r3, [r0, #20]
   d4b70:	bd10      	pop	{r4, pc}

000d4b72 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4b72:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b74:	780d      	ldrb	r5, [r1, #0]
   d4b76:	788b      	ldrb	r3, [r1, #2]
   d4b78:	784a      	ldrb	r2, [r1, #1]
   d4b7a:	78c9      	ldrb	r1, [r1, #3]
   d4b7c:	9100      	str	r1, [sp, #0]
   d4b7e:	4629      	mov	r1, r5
   d4b80:	f7ff ffea 	bl	d4b58 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4b84:	b003      	add	sp, #12
   d4b86:	bd30      	pop	{r4, r5, pc}

000d4b88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b88:	4770      	bx	lr

000d4b8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4b8a:	2000      	movs	r0, #0
   d4b8c:	4770      	bx	lr

000d4b8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4b8e:	b510      	push	{r4, lr}
   d4b90:	2110      	movs	r1, #16
   d4b92:	4604      	mov	r4, r0
   d4b94:	f000 fdfd 	bl	d5792 <_ZdlPvj>
   d4b98:	4620      	mov	r0, r4
   d4b9a:	bd10      	pop	{r4, pc}

000d4b9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4b9c:	b508      	push	{r3, lr}
      { delete this; }
   d4b9e:	b108      	cbz	r0, d4ba4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4ba0:	f7ff fff5 	bl	d4b8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4ba4:	bd08      	pop	{r3, pc}

000d4ba6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4ba6:	2200      	movs	r2, #0
   d4ba8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4baa:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4bac:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4bb0:	8082      	strh	r2, [r0, #4]
   d4bb2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4bb6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bb8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bba:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4bbc:	680c      	ldr	r4, [r1, #0]
   d4bbe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bc0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4bc2:	bd10      	pop	{r4, pc}

000d4bc4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4bc4:	b510      	push	{r4, lr}
   d4bc6:	4604      	mov	r4, r0
    free((void*)msg_);
   d4bc8:	6800      	ldr	r0, [r0, #0]
   d4bca:	f7ff fcbf 	bl	d454c <free>
}
   d4bce:	4620      	mov	r0, r4
   d4bd0:	bd10      	pop	{r4, pc}

000d4bd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4bd2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4bd4:	68c4      	ldr	r4, [r0, #12]
   d4bd6:	b1f4      	cbz	r4, d4c16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4bd8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4bda:	2b02      	cmp	r3, #2
   d4bdc:	d103      	bne.n	d4be6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4bde:	f104 000c 	add.w	r0, r4, #12
   d4be2:	f7ff ffef 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4be6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4be8:	b135      	cbz	r5, d4bf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4bea:	4628      	mov	r0, r5
   d4bec:	f7ff fcce 	bl	d458c <_ZNSt14_Function_baseD1Ev>
   d4bf0:	2110      	movs	r1, #16
   d4bf2:	4628      	mov	r0, r5
   d4bf4:	f000 fdcd 	bl	d5792 <_ZdlPvj>
   d4bf8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4bfa:	b135      	cbz	r5, d4c0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4bfc:	4628      	mov	r0, r5
   d4bfe:	f7ff fcc5 	bl	d458c <_ZNSt14_Function_baseD1Ev>
   d4c02:	2110      	movs	r1, #16
   d4c04:	4628      	mov	r0, r5
   d4c06:	f000 fdc4 	bl	d5792 <_ZdlPvj>
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	2114      	movs	r1, #20
   d4c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c12:	f000 bdbe 	b.w	d5792 <_ZdlPvj>
   d4c16:	bd38      	pop	{r3, r4, r5, pc}

000d4c18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4c18:	b513      	push	{r0, r1, r4, lr}
   d4c1a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4c1c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4c20:	2300      	movs	r3, #0
   d4c22:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c24:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4c26:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4c28:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c2a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4c2c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4c2e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c30:	f7ff fa52 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c34:	4620      	mov	r0, r4
   d4c36:	b002      	add	sp, #8
   d4c38:	bd10      	pop	{r4, pc}

000d4c3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c3c:	460c      	mov	r4, r1
   d4c3e:	ad02      	add	r5, sp, #8
   d4c40:	f854 3b04 	ldr.w	r3, [r4], #4
   d4c44:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4c48:	4606      	mov	r6, r0
   d4c4a:	460f      	mov	r7, r1
   d4c4c:	a801      	add	r0, sp, #4
   d4c4e:	4621      	mov	r1, r4
   d4c50:	f7ff fe9c 	bl	d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4c54:	4629      	mov	r1, r5
   d4c56:	4630      	mov	r0, r6
   d4c58:	f7ff ffde 	bl	d4c18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c5c:	a801      	add	r0, sp, #4
   d4c5e:	f7ff fa3b 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c62:	4620      	mov	r0, r4
   d4c64:	f7ff fa38 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4c68:	4638      	mov	r0, r7
   d4c6a:	2108      	movs	r1, #8
   d4c6c:	f000 fd91 	bl	d5792 <_ZdlPvj>
        return p;
    }
   d4c70:	4630      	mov	r0, r6
   d4c72:	b003      	add	sp, #12
   d4c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c76 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4c76:	b513      	push	{r0, r1, r4, lr}
   d4c78:	460b      	mov	r3, r1
   d4c7a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c7c:	c803      	ldmia	r0, {r0, r1}
   d4c7e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c82:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4c86:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4c8a:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4c8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4c92:	b002      	add	sp, #8
   d4c94:	bd10      	pop	{r4, pc}
	...

000d4c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4c98:	b538      	push	{r3, r4, r5, lr}
   d4c9a:	2300      	movs	r3, #0
   d4c9c:	4604      	mov	r4, r0
   d4c9e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ca0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ca2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ca4:	f7ff f9f7 	bl	d4096 <_Znwj>
   d4ca8:	b128      	cbz	r0, d4cb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4caa:	2301      	movs	r3, #1
   d4cac:	6043      	str	r3, [r0, #4]
   d4cae:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4cb0:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4cb2:	6003      	str	r3, [r0, #0]
   d4cb4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4cb6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4cb8:	4620      	mov	r0, r4
   d4cba:	bd38      	pop	{r3, r4, r5, pc}
   d4cbc:	000d5cb8 	.word	0x000d5cb8

000d4cc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4cc0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4cc2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4cc4:	b90a      	cbnz	r2, d4cca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4cc6:	f000 fd66 	bl	d5796 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cca:	68c3      	ldr	r3, [r0, #12]
    }
   d4ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cd0:	4718      	bx	r3

000d4cd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4cd2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cd4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4cd6:	f100 0110 	add.w	r1, r0, #16
   d4cda:	f7ff fff1 	bl	d4cc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4cde:	bd08      	pop	{r3, pc}

000d4ce0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ce0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ce2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ce4:	b90a      	cbnz	r2, d4cea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4ce6:	f000 fd56 	bl	d5796 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cea:	68c3      	ldr	r3, [r0, #12]
    }
   d4cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cf0:	4718      	bx	r3

000d4cf2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4cf2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4cf4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4cf6:	f100 0110 	add.w	r1, r0, #16
   d4cfa:	f7ff fff1 	bl	d4ce0 <_ZNKSt8functionIFvRKbEEclES1_>
   d4cfe:	bd08      	pop	{r3, pc}

000d4d00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d00:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d02:	2300      	movs	r3, #0
   d4d04:	6083      	str	r3, [r0, #8]
   d4d06:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4d08:	4604      	mov	r4, r0
   d4d0a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4d0c:	b12b      	cbz	r3, d4d1a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d0e:	2202      	movs	r2, #2
   d4d10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d12:	68eb      	ldr	r3, [r5, #12]
   d4d14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d16:	68ab      	ldr	r3, [r5, #8]
   d4d18:	60a3      	str	r3, [r4, #8]
	}
    }
   d4d1a:	4620      	mov	r0, r4
   d4d1c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d22:	b089      	sub	sp, #36	; 0x24
   d4d24:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4d26:	4668      	mov	r0, sp
   d4d28:	f7ff ff3d 	bl	d4ba6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4d32:	f04f 0202 	mov.w	r2, #2
   d4d36:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4d3a:	2b00      	cmp	r3, #0
   d4d3c:	d103      	bne.n	d4d46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4d3e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4d42:	2900      	cmp	r1, #0
   d4d44:	d1f7      	bne.n	d4d36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4d46:	d002      	beq.n	d4d4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4d48:	f88d 3008 	strb.w	r3, [sp, #8]
   d4d4c:	e063      	b.n	d4e16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4d4e:	f114 050c 	adds.w	r5, r4, #12
   d4d52:	d003      	beq.n	d4d5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4d54:	4669      	mov	r1, sp
   d4d56:	4628      	mov	r0, r5
   d4d58:	f7ff ff25 	bl	d4ba6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4d5c:	f3bf 8f5f 	dmb	sy
   d4d60:	2301      	movs	r3, #1
   d4d62:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4d64:	2000      	movs	r0, #0
   d4d66:	f104 0308 	add.w	r3, r4, #8
   d4d6a:	f3bf 8f5f 	dmb	sy
   d4d6e:	e853 6f00 	ldrex	r6, [r3]
   d4d72:	e843 0200 	strex	r2, r0, [r3]
   d4d76:	2a00      	cmp	r2, #0
   d4d78:	d1f9      	bne.n	d4d6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4d7a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4d7e:	2e00      	cmp	r6, #0
   d4d80:	d049      	beq.n	d4e16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4d82:	f7ff fbb7 	bl	d44f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4d86:	b120      	cbz	r0, d4d92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4d88:	4629      	mov	r1, r5
   d4d8a:	4630      	mov	r0, r6
   d4d8c:	f7ff ff98 	bl	d4cc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4d90:	e03a      	b.n	d4e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d92:	4631      	mov	r1, r6
   d4d94:	a802      	add	r0, sp, #8
   d4d96:	f7ff ffb3 	bl	d4d00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4d9a:	68e0      	ldr	r0, [r4, #12]
   d4d9c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4da0:	b108      	cbz	r0, d4da6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4da2:	f000 fec7 	bl	d5b34 <strdup>
   d4da6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4da8:	2010      	movs	r0, #16
   d4daa:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4dae:	f7ff f972 	bl	d4096 <_Znwj>
   d4db2:	4605      	mov	r5, r0
   d4db4:	b1e8      	cbz	r0, d4df2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4db6:	2700      	movs	r7, #0
   d4db8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4dba:	2018      	movs	r0, #24
   d4dbc:	f7ff f96b 	bl	d4096 <_Znwj>
   d4dc0:	4604      	mov	r4, r0
   d4dc2:	b188      	cbz	r0, d4de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4dc4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4dc6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4dc8:	a802      	add	r0, sp, #8
   d4dca:	f7ff ff54 	bl	d4c76 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4dce:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4dd0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4dd2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4dd4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4dd6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4dd8:	a906      	add	r1, sp, #24
   d4dda:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ddc:	60e3      	str	r3, [r4, #12]
   d4dde:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4de2:	9205      	str	r2, [sp, #20]
   d4de4:	f7ff fedf 	bl	d4ba6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4de8:	4b0d      	ldr	r3, [pc, #52]	; (d4e20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4dea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4dec:	4b0d      	ldr	r3, [pc, #52]	; (d4e24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4dee:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4df0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4df2:	a806      	add	r0, sp, #24
   d4df4:	f7ff fee6 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4df8:	a802      	add	r0, sp, #8
   d4dfa:	f7ff fbc7 	bl	d458c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4dfe:	2200      	movs	r2, #0
   d4e00:	4629      	mov	r1, r5
   d4e02:	4809      	ldr	r0, [pc, #36]	; (d4e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4e04:	f7ff fb7e 	bl	d4504 <application_thread_invoke>
   d4e08:	4630      	mov	r0, r6
   d4e0a:	f7ff fbbf 	bl	d458c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4e0e:	2110      	movs	r1, #16
   d4e10:	4630      	mov	r0, r6
   d4e12:	f000 fcbe 	bl	d5792 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4e16:	4668      	mov	r0, sp
   d4e18:	f7ff fed4 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
    }
   d4e1c:	b009      	add	sp, #36	; 0x24
   d4e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e20:	000d4cd3 	.word	0x000d4cd3
   d4e24:	000d4f49 	.word	0x000d4f49
   d4e28:	000d48df 	.word	0x000d48df

000d4e2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e30:	b08b      	sub	sp, #44	; 0x2c
   d4e32:	4606      	mov	r6, r0
   d4e34:	460f      	mov	r7, r1
   d4e36:	4690      	mov	r8, r2
   d4e38:	4699      	mov	r9, r3
   d4e3a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e3e:	f7ff fae1 	bl	d4404 <spark_cloud_flag_connected>
   d4e42:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4e44:	4683      	mov	fp, r0
   d4e46:	bb30      	cbnz	r0, d4e96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e48:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4e4c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4e4e:	a905      	add	r1, sp, #20
   d4e50:	4628      	mov	r0, r5
   d4e52:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4e56:	f7ff fea6 	bl	d4ba6 <_ZN8particle5ErrorC1EOS0_>
   d4e5a:	2014      	movs	r0, #20
   d4e5c:	f7ff f91b 	bl	d4096 <_Znwj>
   d4e60:	4604      	mov	r4, r0
   d4e62:	b158      	cbz	r0, d4e7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4e64:	2302      	movs	r3, #2
   d4e66:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4e68:	2301      	movs	r3, #1
   d4e6a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4e6c:	f8c0 b004 	str.w	fp, [r0, #4]
   d4e70:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4e74:	4629      	mov	r1, r5
   d4e76:	300c      	adds	r0, #12
   d4e78:	f7ff fe95 	bl	d4ba6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4e7c:	4630      	mov	r0, r6
   d4e7e:	4621      	mov	r1, r4
   d4e80:	f840 4b04 	str.w	r4, [r0], #4
   d4e84:	f7ff ff08 	bl	d4c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4e88:	4628      	mov	r0, r5
   d4e8a:	f7ff fe9b 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4e8e:	a805      	add	r0, sp, #20
   d4e90:	f7ff fe98 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
   d4e94:	e052      	b.n	d4f3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4e96:	2400      	movs	r4, #0
   d4e98:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4e9a:	2014      	movs	r0, #20
   d4e9c:	606c      	str	r4, [r5, #4]
   d4e9e:	60ac      	str	r4, [r5, #8]
   d4ea0:	9307      	str	r3, [sp, #28]
   d4ea2:	f7ff f8f8 	bl	d4096 <_Znwj>
   d4ea6:	4601      	mov	r1, r0
   d4ea8:	b118      	cbz	r0, d4eb2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4eaa:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4eac:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4eae:	6044      	str	r4, [r0, #4]
   d4eb0:	6084      	str	r4, [r0, #8]
   d4eb2:	a804      	add	r0, sp, #16
   d4eb4:	9103      	str	r1, [sp, #12]
   d4eb6:	f7ff feef 	bl	d4c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4eba:	4b22      	ldr	r3, [pc, #136]	; (d4f44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4ebc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4ebe:	2008      	movs	r0, #8
   d4ec0:	f7ff f8e9 	bl	d4096 <_Znwj>
   d4ec4:	4604      	mov	r4, r0
   d4ec6:	b128      	cbz	r0, d4ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ec8:	9b03      	ldr	r3, [sp, #12]
   d4eca:	f840 3b04 	str.w	r3, [r0], #4
   d4ece:	a904      	add	r1, sp, #16
   d4ed0:	f7ff fd5c 	bl	d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ed4:	9500      	str	r5, [sp, #0]
   d4ed6:	fa5f f38a 	uxtb.w	r3, sl
   d4eda:	464a      	mov	r2, r9
   d4edc:	4641      	mov	r1, r8
   d4ede:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4ee0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4ee2:	f7ff fa97 	bl	d4414 <spark_send_event>
   d4ee6:	b920      	cbnz	r0, d4ef2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4ee8:	9b03      	ldr	r3, [sp, #12]
   d4eea:	785b      	ldrb	r3, [r3, #1]
   d4eec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4ef0:	b183      	cbz	r3, d4f14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4ef2:	9b03      	ldr	r3, [sp, #12]
   d4ef4:	9305      	str	r3, [sp, #20]
   d4ef6:	a904      	add	r1, sp, #16
   d4ef8:	a806      	add	r0, sp, #24
   d4efa:	f7ff fd47 	bl	d498c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4efe:	a905      	add	r1, sp, #20
   d4f00:	4630      	mov	r0, r6
   d4f02:	f7ff fe89 	bl	d4c18 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f06:	a806      	add	r0, sp, #24
   d4f08:	f7ff f8e6 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f0c:	a804      	add	r0, sp, #16
   d4f0e:	f7ff f8e3 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f12:	e013      	b.n	d4f3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4f14:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4f18:	a905      	add	r1, sp, #20
   d4f1a:	a803      	add	r0, sp, #12
   d4f1c:	9205      	str	r2, [sp, #20]
   d4f1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4f22:	f7ff fefd 	bl	d4d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4f26:	a805      	add	r0, sp, #20
   d4f28:	f7ff fe4c 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4f2c:	a805      	add	r0, sp, #20
   d4f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4f30:	f7ff fe83 	bl	d4c3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4f34:	a806      	add	r0, sp, #24
   d4f36:	f7ff f8cf 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f3a:	e7da      	b.n	d4ef2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d4f3c:	4630      	mov	r0, r6
   d4f3e:	b00b      	add	sp, #44	; 0x2c
   d4f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4f44:	000d50b9 	.word	0x000d50b9

000d4f48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4f48:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f4c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4f4e:	d006      	beq.n	d4f5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4f50:	2a03      	cmp	r2, #3
   d4f52:	d017      	beq.n	d4f84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4f54:	2a01      	cmp	r2, #1
   d4f56:	d122      	bne.n	d4f9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f58:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4f5a:	6003      	str	r3, [r0, #0]
	      break;
   d4f5c:	e01f      	b.n	d4f9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4f5e:	2018      	movs	r0, #24
   d4f60:	680e      	ldr	r6, [r1, #0]
   d4f62:	f7ff f898 	bl	d4096 <_Znwj>
   d4f66:	4605      	mov	r5, r0
   d4f68:	b150      	cbz	r0, d4f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4f6a:	4631      	mov	r1, r6
   d4f6c:	f7ff fec8 	bl	d4d00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4f70:	6930      	ldr	r0, [r6, #16]
   d4f72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4f76:	b108      	cbz	r0, d4f7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4f78:	f000 fddc 	bl	d5b34 <strdup>
   d4f7c:	6128      	str	r0, [r5, #16]
   d4f7e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4f80:	6025      	str	r5, [r4, #0]
   d4f82:	e00c      	b.n	d4f9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4f84:	6804      	ldr	r4, [r0, #0]
   d4f86:	b154      	cbz	r4, d4f9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4f88:	f104 0010 	add.w	r0, r4, #16
   d4f8c:	f7ff fe1a 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f90:	4620      	mov	r0, r4
   d4f92:	f7ff fafb 	bl	d458c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4f96:	2118      	movs	r1, #24
   d4f98:	4620      	mov	r0, r4
   d4f9a:	f000 fbfa 	bl	d5792 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4f9e:	2000      	movs	r0, #0
   d4fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fa2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4fa2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fa4:	2300      	movs	r3, #0
   d4fa6:	6083      	str	r3, [r0, #8]
   d4fa8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4faa:	4604      	mov	r4, r0
   d4fac:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4fae:	b12b      	cbz	r3, d4fbc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4fb0:	2202      	movs	r2, #2
   d4fb2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4fb4:	68eb      	ldr	r3, [r5, #12]
   d4fb6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4fb8:	68ab      	ldr	r3, [r5, #8]
   d4fba:	60a3      	str	r3, [r4, #8]
	}
    }
   d4fbc:	4620      	mov	r0, r4
   d4fbe:	bd38      	pop	{r3, r4, r5, pc}

000d4fc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fc0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4fc2:	b570      	push	{r4, r5, r6, lr}
   d4fc4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4fc6:	d006      	beq.n	d4fd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4fc8:	2a03      	cmp	r2, #3
   d4fca:	d011      	beq.n	d4ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4fcc:	2a01      	cmp	r2, #1
   d4fce:	d118      	bne.n	d5002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4fd0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4fd2:	6003      	str	r3, [r0, #0]
	      break;
   d4fd4:	e015      	b.n	d5002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fd6:	2014      	movs	r0, #20
   d4fd8:	680e      	ldr	r6, [r1, #0]
   d4fda:	f7ff f85c 	bl	d4096 <_Znwj>
   d4fde:	4605      	mov	r5, r0
   d4fe0:	b120      	cbz	r0, d4fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4fe2:	4631      	mov	r1, r6
   d4fe4:	f7ff ffdd 	bl	d4fa2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4fe8:	7c33      	ldrb	r3, [r6, #16]
   d4fea:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4fec:	6025      	str	r5, [r4, #0]
   d4fee:	e008      	b.n	d5002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4ff0:	6804      	ldr	r4, [r0, #0]
   d4ff2:	b134      	cbz	r4, d5002 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	f7ff fac9 	bl	d458c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4ffa:	2114      	movs	r1, #20
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	f000 fbc8 	bl	d5792 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5002:	2000      	movs	r0, #0
   d5004:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5008 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5008:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d500a:	2300      	movs	r3, #0
   d500c:	b087      	sub	sp, #28
   d500e:	460c      	mov	r4, r1
   d5010:	f3bf 8f5f 	dmb	sy
   d5014:	e850 6f00 	ldrex	r6, [r0]
   d5018:	e840 3200 	strex	r2, r3, [r0]
   d501c:	2a00      	cmp	r2, #0
   d501e:	d1f9      	bne.n	d5014 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5020:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5024:	2e00      	cmp	r6, #0
   d5026:	d03f      	beq.n	d50a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5028:	4618      	mov	r0, r3
   d502a:	f7ff fa63 	bl	d44f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d502e:	4607      	mov	r7, r0
   d5030:	b120      	cbz	r0, d503c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5032:	4621      	mov	r1, r4
   d5034:	4630      	mov	r0, r6
   d5036:	f7ff fe53 	bl	d4ce0 <_ZNKSt8functionIFvRKbEEclES1_>
   d503a:	e02e      	b.n	d509a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d503c:	4631      	mov	r1, r6
   d503e:	a801      	add	r0, sp, #4
   d5040:	f7ff ffaf 	bl	d4fa2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5044:	7823      	ldrb	r3, [r4, #0]
   d5046:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d504a:	2010      	movs	r0, #16
   d504c:	f7ff f823 	bl	d4096 <_Znwj>
   d5050:	4605      	mov	r5, r0
   d5052:	b1d0      	cbz	r0, d508a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5054:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5056:	2014      	movs	r0, #20
   d5058:	f7ff f81d 	bl	d4096 <_Znwj>
   d505c:	4604      	mov	r4, r0
   d505e:	b178      	cbz	r0, d5080 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5060:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5062:	4601      	mov	r1, r0
   d5064:	a801      	add	r0, sp, #4
   d5066:	f7ff fe06 	bl	d4c76 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d506a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d506c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d506e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5070:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5072:	9203      	str	r2, [sp, #12]
   d5074:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5076:	60e3      	str	r3, [r4, #12]
   d5078:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d507c:	9204      	str	r2, [sp, #16]
   d507e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5080:	4b0a      	ldr	r3, [pc, #40]	; (d50ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5082:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5084:	4b0a      	ldr	r3, [pc, #40]	; (d50b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5086:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5088:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d508a:	a801      	add	r0, sp, #4
   d508c:	f7ff fa7e 	bl	d458c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5090:	2200      	movs	r2, #0
   d5092:	4629      	mov	r1, r5
   d5094:	4807      	ldr	r0, [pc, #28]	; (d50b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5096:	f7ff fa35 	bl	d4504 <application_thread_invoke>
   d509a:	4630      	mov	r0, r6
   d509c:	f7ff fa76 	bl	d458c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d50a0:	2110      	movs	r1, #16
   d50a2:	4630      	mov	r0, r6
   d50a4:	f000 fb75 	bl	d5792 <_ZdlPvj>
        }
    }
   d50a8:	b007      	add	sp, #28
   d50aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50ac:	000d4cf3 	.word	0x000d4cf3
   d50b0:	000d4fc1 	.word	0x000d4fc1
   d50b4:	000d48df 	.word	0x000d48df

000d50b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d50b8:	b530      	push	{r4, r5, lr}
   d50ba:	b085      	sub	sp, #20
   d50bc:	4604      	mov	r4, r0
   d50be:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d50c0:	4668      	mov	r0, sp
   d50c2:	4611      	mov	r1, r2
   d50c4:	f7ff fdb9 	bl	d4c3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d50c8:	b17c      	cbz	r4, d50ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d50ca:	b224      	sxth	r4, r4
   d50cc:	4628      	mov	r0, r5
   d50ce:	b10d      	cbz	r5, d50d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d50d0:	f000 fd30 	bl	d5b34 <strdup>
   d50d4:	9002      	str	r0, [sp, #8]
   d50d6:	a902      	add	r1, sp, #8
   d50d8:	4668      	mov	r0, sp
   d50da:	f8ad 400c 	strh.w	r4, [sp, #12]
   d50de:	f7ff fe1f 	bl	d4d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d50e2:	a802      	add	r0, sp, #8
   d50e4:	f7ff fd6e 	bl	d4bc4 <_ZN8particle5ErrorD1Ev>
   d50e8:	e01d      	b.n	d5126 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d50ea:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d50ec:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d50f0:	f04f 0201 	mov.w	r2, #1
   d50f4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d50f8:	42a3      	cmp	r3, r4
   d50fa:	d103      	bne.n	d5104 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d50fc:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5100:	2900      	cmp	r1, #0
   d5102:	d1f7      	bne.n	d50f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5104:	d002      	beq.n	d510c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5106:	f88d 3008 	strb.w	r3, [sp, #8]
   d510a:	e00c      	b.n	d5126 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d510c:	f110 010c 	adds.w	r1, r0, #12
   d5110:	f04f 0301 	mov.w	r3, #1
   d5114:	bf18      	it	ne
   d5116:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5118:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d511c:	3004      	adds	r0, #4
   d511e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5122:	f7ff ff71 	bl	d5008 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5126:	a801      	add	r0, sp, #4
   d5128:	f7fe ffd6 	bl	d40d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d512c:	b005      	add	sp, #20
   d512e:	bd30      	pop	{r4, r5, pc}

000d5130 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5130:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5132:	4b0c      	ldr	r3, [pc, #48]	; (d5164 <serialEventRun+0x34>)
   d5134:	b133      	cbz	r3, d5144 <serialEventRun+0x14>
   d5136:	f7ff fc8f 	bl	d4a58 <_Z16_fetch_usbserialv>
   d513a:	6803      	ldr	r3, [r0, #0]
   d513c:	691b      	ldr	r3, [r3, #16]
   d513e:	4798      	blx	r3
   d5140:	2800      	cmp	r0, #0
   d5142:	dc09      	bgt.n	d5158 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5144:	4b08      	ldr	r3, [pc, #32]	; (d5168 <serialEventRun+0x38>)
   d5146:	b163      	cbz	r3, d5162 <serialEventRun+0x32>
   d5148:	f000 f942 	bl	d53d0 <_Z22__fetch_global_Serial1v>
   d514c:	6803      	ldr	r3, [r0, #0]
   d514e:	691b      	ldr	r3, [r3, #16]
   d5150:	4798      	blx	r3
   d5152:	2800      	cmp	r0, #0
   d5154:	dc03      	bgt.n	d515e <serialEventRun+0x2e>
   d5156:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5158:	f3af 8000 	nop.w
   d515c:	e7f2      	b.n	d5144 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d515e:	f3af 8000 	nop.w
   d5162:	bd08      	pop	{r3, pc}
	...

000d516c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d516c:	b508      	push	{r3, lr}
	serialEventRun();
   d516e:	f7ff ffdf 	bl	d5130 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5172:	f7ff f8ff 	bl	d4374 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5176:	4b01      	ldr	r3, [pc, #4]	; (d517c <_post_loop+0x10>)
   d5178:	6018      	str	r0, [r3, #0]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	2003e72c 	.word	0x2003e72c

000d5180 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5180:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5182:	2300      	movs	r3, #0
   d5184:	9300      	str	r3, [sp, #0]
   d5186:	461a      	mov	r2, r3
   d5188:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d518c:	f7ff f9cc 	bl	d4528 <system_ctrl_set_result>
}
   d5190:	b003      	add	sp, #12
   d5192:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5198 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5198:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d519a:	8843      	ldrh	r3, [r0, #2]
   d519c:	2b0a      	cmp	r3, #10
   d519e:	d008      	beq.n	d51b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d51a0:	2b50      	cmp	r3, #80	; 0x50
   d51a2:	d109      	bne.n	d51b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d51a4:	4b09      	ldr	r3, [pc, #36]	; (d51cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d51a6:	681b      	ldr	r3, [r3, #0]
   d51a8:	b13b      	cbz	r3, d51ba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d51aa:	b003      	add	sp, #12
   d51ac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d51b0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d51b2:	f7ff ffe5 	bl	d5180 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d51b6:	e006      	b.n	d51c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d51b8:	2300      	movs	r3, #0
   d51ba:	9300      	str	r3, [sp, #0]
   d51bc:	461a      	mov	r2, r3
   d51be:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51c2:	f7ff f9b1 	bl	d4528 <system_ctrl_set_result>
        break;
    }
}
   d51c6:	b003      	add	sp, #12
   d51c8:	f85d fb04 	ldr.w	pc, [sp], #4
   d51cc:	2003e5c4 	.word	0x2003e5c4

000d51d0 <module_user_init_hook>:

void module_user_init_hook()
{
   d51d0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d51d2:	f7ff f8c7 	bl	d4364 <HAL_RNG_GetRandomNumber>
   d51d6:	4604      	mov	r4, r0
    srand(seed);
   d51d8:	f000 fc4a 	bl	d5a70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d51dc:	4b07      	ldr	r3, [pc, #28]	; (d51fc <module_user_init_hook+0x2c>)
   d51de:	b113      	cbz	r3, d51e6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d51e0:	4620      	mov	r0, r4
   d51e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d51e6:	2100      	movs	r1, #0
   d51e8:	4804      	ldr	r0, [pc, #16]	; (d51fc <module_user_init_hook+0x2c>)
   d51ea:	f7ff f91b 	bl	d4424 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51ee:	2100      	movs	r1, #0
   d51f0:	4803      	ldr	r0, [pc, #12]	; (d5200 <module_user_init_hook+0x30>)
}
   d51f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51f6:	f7ff b98d 	b.w	d4514 <system_ctrl_set_app_request_handler>
   d51fa:	bf00      	nop
   d51fc:	00000000 	.word	0x00000000
   d5200:	000d5199 	.word	0x000d5199

000d5204 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5204:	b510      	push	{r4, lr}
   d5206:	4604      	mov	r4, r0
   d5208:	f7ff f9c0 	bl	d458c <_ZNSt14_Function_baseD1Ev>
   d520c:	4620      	mov	r0, r4
   d520e:	bd10      	pop	{r4, pc}

000d5210 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5210:	4803      	ldr	r0, [pc, #12]	; (d5220 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5212:	4a04      	ldr	r2, [pc, #16]	; (d5224 <_GLOBAL__sub_I_RGB+0x14>)
   d5214:	4904      	ldr	r1, [pc, #16]	; (d5228 <_GLOBAL__sub_I_RGB+0x18>)
   d5216:	2300      	movs	r3, #0
   d5218:	6083      	str	r3, [r0, #8]
   d521a:	f000 bab5 	b.w	d5788 <__aeabi_atexit>
   d521e:	bf00      	nop
   d5220:	2003e5c8 	.word	0x2003e5c8
   d5224:	2003e3bc 	.word	0x2003e3bc
   d5228:	000d5205 	.word	0x000d5205

000d522c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d522c:	2100      	movs	r1, #0
   d522e:	f7ff b959 	b.w	d44e4 <system_delay_ms>
	...

000d5234 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5234:	4b02      	ldr	r3, [pc, #8]	; (d5240 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5236:	681a      	ldr	r2, [r3, #0]
   d5238:	4b02      	ldr	r3, [pc, #8]	; (d5244 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d523a:	601a      	str	r2, [r3, #0]
   d523c:	4770      	bx	lr
   d523e:	bf00      	nop
   d5240:	2003e354 	.word	0x2003e354
   d5244:	2003e5d8 	.word	0x2003e5d8

000d5248 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5248:	4b01      	ldr	r3, [pc, #4]	; (d5250 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d524a:	4a02      	ldr	r2, [pc, #8]	; (d5254 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d524c:	601a      	str	r2, [r3, #0]
   d524e:	4770      	bx	lr
   d5250:	2003e5dc 	.word	0x2003e5dc
   d5254:	000d5d68 	.word	0x000d5d68

000d5258 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d525a:	4606      	mov	r6, r0
   d525c:	460d      	mov	r5, r1
   d525e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5260:	2400      	movs	r4, #0
  while (size--) {
   d5262:	42bd      	cmp	r5, r7
   d5264:	d00c      	beq.n	d5280 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5266:	6833      	ldr	r3, [r6, #0]
   d5268:	f815 1b01 	ldrb.w	r1, [r5], #1
   d526c:	689b      	ldr	r3, [r3, #8]
   d526e:	4630      	mov	r0, r6
   d5270:	4798      	blx	r3
     if (chunk>=0)
   d5272:	2800      	cmp	r0, #0
   d5274:	db01      	blt.n	d527a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5276:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5278:	e7f3      	b.n	d5262 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d527a:	2c00      	cmp	r4, #0
   d527c:	bf08      	it	eq
   d527e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5280:	4620      	mov	r0, r4
   d5282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5284 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5284:	b570      	push	{r4, r5, r6, lr}
   d5286:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5288:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d528a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d528c:	b149      	cbz	r1, d52a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d528e:	f000 fc6c 	bl	d5b6a <strlen>
   d5292:	682b      	ldr	r3, [r5, #0]
   d5294:	4602      	mov	r2, r0
   d5296:	4621      	mov	r1, r4
   d5298:	4628      	mov	r0, r5
   d529a:	68db      	ldr	r3, [r3, #12]
    }
   d529c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d52a0:	4718      	bx	r3
    }
   d52a2:	bd70      	pop	{r4, r5, r6, pc}

000d52a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d52a4:	6803      	ldr	r3, [r0, #0]
   d52a6:	689b      	ldr	r3, [r3, #8]
   d52a8:	4718      	bx	r3

000d52aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d52aa:	b530      	push	{r4, r5, lr}
   d52ac:	b08b      	sub	sp, #44	; 0x2c
   d52ae:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d52b0:	2100      	movs	r1, #0
   d52b2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d52b6:	2a01      	cmp	r2, #1
   d52b8:	bf98      	it	ls
   d52ba:	220a      	movls	r2, #10
   d52bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d52c0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d52c4:	fb05 3312 	mls	r3, r5, r2, r3
   d52c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d52cc:	2b09      	cmp	r3, #9
   d52ce:	bf94      	ite	ls
   d52d0:	3330      	addls	r3, #48	; 0x30
   d52d2:	3337      	addhi	r3, #55	; 0x37
   d52d4:	b2db      	uxtb	r3, r3
   d52d6:	4621      	mov	r1, r4
   d52d8:	f804 3901 	strb.w	r3, [r4], #-1
   d52dc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d52de:	2d00      	cmp	r5, #0
   d52e0:	d1ee      	bne.n	d52c0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d52e2:	f7ff ffcf 	bl	d5284 <_ZN5Print5writeEPKc>
}
   d52e6:	b00b      	add	sp, #44	; 0x2c
   d52e8:	bd30      	pop	{r4, r5, pc}

000d52ea <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d52ea:	b410      	push	{r4}
  if (base == 0) return write(n);
   d52ec:	b92a      	cbnz	r2, d52fa <_ZN5Print5printEmi+0x10>
   d52ee:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d52f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d52f4:	689b      	ldr	r3, [r3, #8]
   d52f6:	b2c9      	uxtb	r1, r1
   d52f8:	4718      	bx	r3
  else return printNumber(n, base);
   d52fa:	b2d2      	uxtb	r2, r2
}
   d52fc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5300:	f7ff bfd3 	b.w	d52aa <_ZN5Print11printNumberEmh>

000d5304 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5304:	f7ff bff1 	b.w	d52ea <_ZN5Print5printEmi>

000d5308 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5308:	4802      	ldr	r0, [pc, #8]	; (d5314 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d530a:	2300      	movs	r3, #0
   d530c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d530e:	f7ff b821 	b.w	d4354 <os_mutex_recursive_create>
   d5312:	bf00      	nop
   d5314:	2003e5e0 	.word	0x2003e5e0

000d5318 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5318:	4770      	bx	lr

000d531a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d531a:	7441      	strb	r1, [r0, #17]
   d531c:	4770      	bx	lr

000d531e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d531e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5320:	7c00      	ldrb	r0, [r0, #16]
   d5322:	f7fe ffe7 	bl	d42f4 <HAL_USART_Available_Data_For_Write>
}
   d5326:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d532a:	bd08      	pop	{r3, pc}

000d532c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d532c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d532e:	7c00      	ldrb	r0, [r0, #16]
   d5330:	f7fe ffb8 	bl	d42a4 <HAL_USART_Available_Data>
}
   d5334:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5338:	bd08      	pop	{r3, pc}

000d533a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d533a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d533c:	7c00      	ldrb	r0, [r0, #16]
   d533e:	f7fe ffc1 	bl	d42c4 <HAL_USART_Peek_Data>
}
   d5342:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5346:	bf28      	it	cs
   d5348:	f04f 30ff 	movcs.w	r0, #4294967295
   d534c:	bd08      	pop	{r3, pc}

000d534e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d534e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5350:	7c00      	ldrb	r0, [r0, #16]
   d5352:	f7fe ffaf 	bl	d42b4 <HAL_USART_Read_Data>
}
   d5356:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d535a:	bf28      	it	cs
   d535c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5360:	bd08      	pop	{r3, pc}

000d5362 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5362:	7c00      	ldrb	r0, [r0, #16]
   d5364:	f7fe bfb6 	b.w	d42d4 <HAL_USART_Flush_Data>

000d5368 <_ZN11USARTSerialD0Ev>:
   d5368:	b510      	push	{r4, lr}
   d536a:	2114      	movs	r1, #20
   d536c:	4604      	mov	r4, r0
   d536e:	f000 fa10 	bl	d5792 <_ZdlPvj>
   d5372:	4620      	mov	r0, r4
   d5374:	bd10      	pop	{r4, pc}

000d5376 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5376:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5378:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d537a:	4604      	mov	r4, r0
   d537c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d537e:	b925      	cbnz	r5, d538a <_ZN11USARTSerial5writeEh+0x14>
   d5380:	7c00      	ldrb	r0, [r0, #16]
   d5382:	f7fe ffb7 	bl	d42f4 <HAL_USART_Available_Data_For_Write>
   d5386:	2800      	cmp	r0, #0
   d5388:	dd05      	ble.n	d5396 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d538a:	4631      	mov	r1, r6
   d538c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d538e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5392:	f7fe bf7f 	b.w	d4294 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5396:	4628      	mov	r0, r5
   d5398:	bd70      	pop	{r4, r5, r6, pc}
	...

000d539c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d539c:	b510      	push	{r4, lr}
   d539e:	4604      	mov	r4, r0
   d53a0:	4608      	mov	r0, r1
   d53a2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d53a4:	2200      	movs	r2, #0
   d53a6:	6062      	str	r2, [r4, #4]
   d53a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d53ac:	60a2      	str	r2, [r4, #8]
   d53ae:	4a05      	ldr	r2, [pc, #20]	; (d53c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d53b0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d53b2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d53b4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d53b6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d53b8:	461a      	mov	r2, r3
   d53ba:	f7fe ff63 	bl	d4284 <HAL_USART_Init>
}
   d53be:	4620      	mov	r0, r4
   d53c0:	bd10      	pop	{r4, pc}
   d53c2:	bf00      	nop
   d53c4:	000d5de0 	.word	0x000d5de0

000d53c8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d53c8:	7c00      	ldrb	r0, [r0, #16]
   d53ca:	f7fe bf8b 	b.w	d42e4 <HAL_USART_Is_Enabled>
	...

000d53d0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d53d0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d53d2:	4d0c      	ldr	r5, [pc, #48]	; (d5404 <_Z22__fetch_global_Serial1v+0x34>)
   d53d4:	6829      	ldr	r1, [r5, #0]
   d53d6:	f011 0401 	ands.w	r4, r1, #1
   d53da:	d111      	bne.n	d5400 <_Z22__fetch_global_Serial1v+0x30>
   d53dc:	4628      	mov	r0, r5
   d53de:	f7fe fe60 	bl	d40a2 <__cxa_guard_acquire>
   d53e2:	b168      	cbz	r0, d5400 <_Z22__fetch_global_Serial1v+0x30>
   d53e4:	4a08      	ldr	r2, [pc, #32]	; (d5408 <_Z22__fetch_global_Serial1v+0x38>)
   d53e6:	4b09      	ldr	r3, [pc, #36]	; (d540c <_Z22__fetch_global_Serial1v+0x3c>)
   d53e8:	4809      	ldr	r0, [pc, #36]	; (d5410 <_Z22__fetch_global_Serial1v+0x40>)
   d53ea:	4621      	mov	r1, r4
   d53ec:	f7ff ffd6 	bl	d539c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d53f0:	4628      	mov	r0, r5
   d53f2:	f7fe fe5b 	bl	d40ac <__cxa_guard_release>
   d53f6:	4a07      	ldr	r2, [pc, #28]	; (d5414 <_Z22__fetch_global_Serial1v+0x44>)
   d53f8:	4907      	ldr	r1, [pc, #28]	; (d5418 <_Z22__fetch_global_Serial1v+0x48>)
   d53fa:	4805      	ldr	r0, [pc, #20]	; (d5410 <_Z22__fetch_global_Serial1v+0x40>)
   d53fc:	f000 f9c4 	bl	d5788 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5400:	4803      	ldr	r0, [pc, #12]	; (d5410 <_Z22__fetch_global_Serial1v+0x40>)
   d5402:	bd38      	pop	{r3, r4, r5, pc}
   d5404:	2003e67c 	.word	0x2003e67c
   d5408:	2003e680 	.word	0x2003e680
   d540c:	2003e5f8 	.word	0x2003e5f8
   d5410:	2003e5e4 	.word	0x2003e5e4
   d5414:	2003e3bc 	.word	0x2003e3bc
   d5418:	000d5319 	.word	0x000d5319

000d541c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d541c:	b510      	push	{r4, lr}
   d541e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5420:	f000 fba3 	bl	d5b6a <strlen>
   d5424:	3801      	subs	r0, #1
   d5426:	1823      	adds	r3, r4, r0
   d5428:	4620      	mov	r0, r4
	while(i<j){
   d542a:	4298      	cmp	r0, r3
   d542c:	d206      	bcs.n	d543c <_Z11str_reversePc+0x20>
		c = *i;
   d542e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5430:	7819      	ldrb	r1, [r3, #0]
   d5432:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5436:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d543a:	e7f6      	b.n	d542a <_Z11str_reversePc+0xe>
   d543c:	bd10      	pop	{r4, pc}

000d543e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d543e:	b570      	push	{r4, r5, r6, lr}
   d5440:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5442:	1e91      	subs	r1, r2, #2
   d5444:	2922      	cmp	r1, #34	; 0x22
   d5446:	d820      	bhi.n	d548a <ultoa+0x4c>
   d5448:	4625      	mov	r5, r4
   d544a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d544c:	b910      	cbnz	r0, d5454 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d544e:	4423      	add	r3, r4
            *ptr++ = '0';
   d5450:	2230      	movs	r2, #48	; 0x30
   d5452:	e00e      	b.n	d5472 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5454:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5458:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d545c:	b2c1      	uxtb	r1, r0
   d545e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5462:	2809      	cmp	r0, #9
                *ptr += '0';
   d5464:	bf94      	ite	ls
   d5466:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5468:	3157      	addhi	r1, #87	; 0x57
   d546a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d546e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5470:	e7eb      	b.n	d544a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5472:	4299      	cmp	r1, r3
   d5474:	d202      	bcs.n	d547c <ultoa+0x3e>
            *ptr++ = '0';
   d5476:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d547a:	e7fa      	b.n	d5472 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d547c:	2300      	movs	r3, #0
	str_reverse(buffer);
   d547e:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5480:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5482:	f7ff ffcb 	bl	d541c <_Z11str_reversePc>
	return buffer;
   d5486:	4620      	mov	r0, r4
   d5488:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d548a:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d548c:	bd70      	pop	{r4, r5, r6, pc}

000d548e <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d548e:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5490:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5492:	460c      	mov	r4, r1
   d5494:	4615      	mov	r5, r2
	if(a<0){
   d5496:	da0b      	bge.n	d54b0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d549c:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d54a0:	bf14      	ite	ne
   d54a2:	4258      	negne	r0, r3
   d54a4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d54a6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d54a8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d54aa:	462a      	mov	r2, r5
   d54ac:	4419      	add	r1, r3
   d54ae:	e000      	b.n	d54b2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d54b0:	2301      	movs	r3, #1
   d54b2:	f7ff ffc4 	bl	d543e <ultoa>
	}
	return buffer;
}
   d54b6:	4620      	mov	r0, r4
   d54b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54bc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d54bc:	4b04      	ldr	r3, [pc, #16]	; (d54d0 <_GLOBAL__sub_I_System+0x14>)
   d54be:	2000      	movs	r0, #0
   d54c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d54c4:	7018      	strb	r0, [r3, #0]
   d54c6:	8058      	strh	r0, [r3, #2]
   d54c8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d54ca:	f7ff b803 	b.w	d44d4 <set_system_mode>
   d54ce:	bf00      	nop
   d54d0:	2003e704 	.word	0x2003e704

000d54d4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d54d4:	4770      	bx	lr

000d54d6 <_ZN8SPIClassD0Ev>:
   d54d6:	b510      	push	{r4, lr}
   d54d8:	2110      	movs	r1, #16
   d54da:	4604      	mov	r4, r0
   d54dc:	f000 f959 	bl	d5792 <_ZdlPvj>
   d54e0:	4620      	mov	r0, r4
   d54e2:	bd10      	pop	{r4, pc}

000d54e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d54e4:	b570      	push	{r4, r5, r6, lr}
   d54e6:	4b08      	ldr	r3, [pc, #32]	; (d5508 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d54e8:	6003      	str	r3, [r0, #0]
   d54ea:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d54ec:	2500      	movs	r5, #0
   d54ee:	460e      	mov	r6, r1
   d54f0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d54f4:	f7fe ff26 	bl	d4344 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d54f8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d54fa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d54fc:	f7fe ff42 	bl	d4384 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5500:	60a5      	str	r5, [r4, #8]
}
   d5502:	4620      	mov	r0, r4
   d5504:	bd70      	pop	{r4, r5, r6, pc}
   d5506:	bf00      	nop
   d5508:	000d5e10 	.word	0x000d5e10

000d550c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d550c:	7900      	ldrb	r0, [r0, #4]
   d550e:	f7fe bf41 	b.w	d4394 <HAL_SPI_Is_Enabled>

000d5512 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5512:	2200      	movs	r2, #0
   d5514:	4611      	mov	r1, r2
   d5516:	6840      	ldr	r0, [r0, #4]
   d5518:	f7fe bfc4 	b.w	d44a4 <network_listening>

000d551c <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d551c:	2200      	movs	r2, #0
   d551e:	4611      	mov	r1, r2
   d5520:	6840      	ldr	r0, [r0, #4]
   d5522:	f7fe bfcf 	b.w	d44c4 <network_get_listen_timeout>

000d5526 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5526:	2200      	movs	r2, #0
   d5528:	6840      	ldr	r0, [r0, #4]
   d552a:	f7fe bfc3 	b.w	d44b4 <network_set_listen_timeout>

000d552e <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d552e:	2200      	movs	r2, #0
   d5530:	f081 0101 	eor.w	r1, r1, #1
   d5534:	6840      	ldr	r0, [r0, #4]
   d5536:	f7fe bfad 	b.w	d4494 <network_listen>

000d553a <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d553a:	2300      	movs	r3, #0
   d553c:	461a      	mov	r2, r3
   d553e:	4619      	mov	r1, r3
   d5540:	6840      	ldr	r0, [r0, #4]
   d5542:	f7fe bf9f 	b.w	d4484 <network_off>

000d5546 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5546:	2300      	movs	r3, #0
   d5548:	461a      	mov	r2, r3
   d554a:	4619      	mov	r1, r3
   d554c:	6840      	ldr	r0, [r0, #4]
   d554e:	f7fe bf91 	b.w	d4474 <network_on>

000d5552 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5552:	2200      	movs	r2, #0
   d5554:	4611      	mov	r1, r2
   d5556:	6840      	ldr	r0, [r0, #4]
   d5558:	f7fe bf84 	b.w	d4464 <network_ready>

000d555c <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d555c:	2200      	movs	r2, #0
   d555e:	4611      	mov	r1, r2
   d5560:	6840      	ldr	r0, [r0, #4]
   d5562:	f7fe bf6f 	b.w	d4444 <network_connecting>

000d5566 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5566:	2200      	movs	r2, #0
   d5568:	2102      	movs	r1, #2
   d556a:	6840      	ldr	r0, [r0, #4]
   d556c:	f7fe bf72 	b.w	d4454 <network_disconnect>

000d5570 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5570:	2300      	movs	r3, #0
   d5572:	461a      	mov	r2, r3
   d5574:	6840      	ldr	r0, [r0, #4]
   d5576:	f7fe bf5d 	b.w	d4434 <network_connect>
	...

000d557c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d557c:	4b02      	ldr	r3, [pc, #8]	; (d5588 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d557e:	2203      	movs	r2, #3
   d5580:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5582:	4a02      	ldr	r2, [pc, #8]	; (d558c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5584:	601a      	str	r2, [r3, #0]
   d5586:	4770      	bx	lr
   d5588:	2003e70c 	.word	0x2003e70c
   d558c:	000d5e20 	.word	0x000d5e20

000d5590 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5590:	b510      	push	{r4, lr}
   d5592:	4604      	mov	r4, r0
{
	free(buffer);
   d5594:	6800      	ldr	r0, [r0, #0]
   d5596:	f7fe ffd9 	bl	d454c <free>
}
   d559a:	4620      	mov	r0, r4
   d559c:	bd10      	pop	{r4, pc}

000d559e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d559e:	b510      	push	{r4, lr}
   d55a0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d55a2:	6800      	ldr	r0, [r0, #0]
   d55a4:	b108      	cbz	r0, d55aa <_ZN6String10invalidateEv+0xc>
   d55a6:	f7fe ffd1 	bl	d454c <free>
	buffer = NULL;
   d55aa:	2300      	movs	r3, #0
   d55ac:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d55ae:	60a3      	str	r3, [r4, #8]
   d55b0:	6063      	str	r3, [r4, #4]
   d55b2:	bd10      	pop	{r4, pc}

000d55b4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d55b4:	b538      	push	{r3, r4, r5, lr}
   d55b6:	4604      	mov	r4, r0
   d55b8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d55ba:	6800      	ldr	r0, [r0, #0]
   d55bc:	3101      	adds	r1, #1
   d55be:	f7fe ffcd 	bl	d455c <realloc>
	if (newbuffer) {
   d55c2:	b110      	cbz	r0, d55ca <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d55c4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d55c8:	2001      	movs	r0, #1
	}
	return 0;
}
   d55ca:	bd38      	pop	{r3, r4, r5, pc}

000d55cc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55cc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d55ce:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55d0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d55d2:	b113      	cbz	r3, d55da <_ZN6String7reserveEj+0xe>
   d55d4:	6843      	ldr	r3, [r0, #4]
   d55d6:	428b      	cmp	r3, r1
   d55d8:	d207      	bcs.n	d55ea <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d55da:	4620      	mov	r0, r4
   d55dc:	f7ff ffea 	bl	d55b4 <_ZN6String12changeBufferEj>
   d55e0:	b120      	cbz	r0, d55ec <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d55e2:	68a3      	ldr	r3, [r4, #8]
   d55e4:	b90b      	cbnz	r3, d55ea <_ZN6String7reserveEj+0x1e>
   d55e6:	6822      	ldr	r2, [r4, #0]
   d55e8:	7013      	strb	r3, [r2, #0]
   d55ea:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d55ec:	bd10      	pop	{r4, pc}

000d55ee <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55ee:	b570      	push	{r4, r5, r6, lr}
   d55f0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d55f2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55f4:	4604      	mov	r4, r0
   d55f6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d55f8:	f7ff ffe8 	bl	d55cc <_ZN6String7reserveEj>
   d55fc:	b918      	cbnz	r0, d5606 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d55fe:	4620      	mov	r0, r4
   d5600:	f7ff ffcd 	bl	d559e <_ZN6String10invalidateEv>
		return *this;
   d5604:	e009      	b.n	d561a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5606:	462a      	mov	r2, r5
   d5608:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d560a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d560c:	6820      	ldr	r0, [r4, #0]
   d560e:	f000 fa1b 	bl	d5a48 <memcpy>
	buffer[len] = 0;
   d5612:	6822      	ldr	r2, [r4, #0]
   d5614:	68a3      	ldr	r3, [r4, #8]
   d5616:	2100      	movs	r1, #0
   d5618:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d561a:	4620      	mov	r0, r4
   d561c:	bd70      	pop	{r4, r5, r6, pc}

000d561e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d561e:	b538      	push	{r3, r4, r5, lr}
   d5620:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5622:	460c      	mov	r4, r1
   d5624:	b141      	cbz	r1, d5638 <_ZN6StringaSEPKc+0x1a>
   d5626:	4608      	mov	r0, r1
   d5628:	f000 fa9f 	bl	d5b6a <strlen>
   d562c:	4621      	mov	r1, r4
   d562e:	4602      	mov	r2, r0
   d5630:	4628      	mov	r0, r5
   d5632:	f7ff ffdc 	bl	d55ee <_ZN6String4copyEPKcj>
   d5636:	e001      	b.n	d563c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5638:	f7ff ffb1 	bl	d559e <_ZN6String10invalidateEv>

	return *this;
}
   d563c:	4628      	mov	r0, r5
   d563e:	bd38      	pop	{r3, r4, r5, pc}

000d5640 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5640:	b510      	push	{r4, lr}
   d5642:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5644:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5646:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5648:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d564a:	6063      	str	r3, [r4, #4]
	len = 0;
   d564c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d564e:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5650:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5652:	a901      	add	r1, sp, #4
   d5654:	f7ff ff1b 	bl	d548e <itoa>
	*this = buf;
   d5658:	a901      	add	r1, sp, #4
   d565a:	4620      	mov	r0, r4
   d565c:	f7ff ffdf 	bl	d561e <_ZN6StringaSEPKc>
}
   d5660:	4620      	mov	r0, r4
   d5662:	b00a      	add	sp, #40	; 0x28
   d5664:	bd10      	pop	{r4, pc}
	...

000d5668 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5668:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d566a:	4d0b      	ldr	r5, [pc, #44]	; (d5698 <_Z19__fetch_global_Wirev+0x30>)
   d566c:	6829      	ldr	r1, [r5, #0]
   d566e:	f011 0401 	ands.w	r4, r1, #1
   d5672:	d10f      	bne.n	d5694 <_Z19__fetch_global_Wirev+0x2c>
   d5674:	4628      	mov	r0, r5
   d5676:	f7fe fd14 	bl	d40a2 <__cxa_guard_acquire>
   d567a:	b158      	cbz	r0, d5694 <_Z19__fetch_global_Wirev+0x2c>
   d567c:	4621      	mov	r1, r4
   d567e:	4807      	ldr	r0, [pc, #28]	; (d569c <_Z19__fetch_global_Wirev+0x34>)
   d5680:	f7ff f96e 	bl	d4960 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5684:	4628      	mov	r0, r5
   d5686:	f7fe fd11 	bl	d40ac <__cxa_guard_release>
   d568a:	4a05      	ldr	r2, [pc, #20]	; (d56a0 <_Z19__fetch_global_Wirev+0x38>)
   d568c:	4905      	ldr	r1, [pc, #20]	; (d56a4 <_Z19__fetch_global_Wirev+0x3c>)
   d568e:	4803      	ldr	r0, [pc, #12]	; (d569c <_Z19__fetch_global_Wirev+0x34>)
   d5690:	f000 f87a 	bl	d5788 <__aeabi_atexit>
	return wire;
}
   d5694:	4801      	ldr	r0, [pc, #4]	; (d569c <_Z19__fetch_global_Wirev+0x34>)
   d5696:	bd38      	pop	{r3, r4, r5, pc}
   d5698:	2003e714 	.word	0x2003e714
   d569c:	2003e718 	.word	0x2003e718
   d56a0:	2003e3bc 	.word	0x2003e3bc
   d56a4:	000d4907 	.word	0x000d4907

000d56a8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d56a8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d56aa:	4c0c      	ldr	r4, [pc, #48]	; (d56dc <_GLOBAL__sub_I_SPI+0x34>)
   d56ac:	4e0c      	ldr	r6, [pc, #48]	; (d56e0 <_GLOBAL__sub_I_SPI+0x38>)
   d56ae:	4d0d      	ldr	r5, [pc, #52]	; (d56e4 <_GLOBAL__sub_I_SPI+0x3c>)
   d56b0:	2100      	movs	r1, #0
   d56b2:	4620      	mov	r0, r4
   d56b4:	f7ff ff16 	bl	d54e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d56b8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d56ba:	4c0b      	ldr	r4, [pc, #44]	; (d56e8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d56bc:	4632      	mov	r2, r6
   d56be:	4629      	mov	r1, r5
   d56c0:	f000 f862 	bl	d5788 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d56c4:	2101      	movs	r1, #1
   d56c6:	4620      	mov	r0, r4
   d56c8:	f7ff ff0c 	bl	d54e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d56cc:	4632      	mov	r2, r6
   d56ce:	4629      	mov	r1, r5
   d56d0:	4620      	mov	r0, r4
   d56d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d56d6:	f000 b857 	b.w	d5788 <__aeabi_atexit>
   d56da:	bf00      	nop
   d56dc:	2003e730 	.word	0x2003e730
   d56e0:	2003e3bc 	.word	0x2003e3bc
   d56e4:	000d54d5 	.word	0x000d54d5
   d56e8:	2003e740 	.word	0x2003e740

000d56ec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d56ec:	b510      	push	{r4, lr}
   d56ee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d56f0:	480f      	ldr	r0, [pc, #60]	; (d5730 <pinAvailable+0x44>)
   d56f2:	f7ff ff0b 	bl	d550c <_ZN8SPIClass9isEnabledEv>
   d56f6:	b128      	cbz	r0, d5704 <pinAvailable+0x18>
   d56f8:	f1a4 030b 	sub.w	r3, r4, #11
   d56fc:	2b02      	cmp	r3, #2
   d56fe:	d801      	bhi.n	d5704 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5700:	2000      	movs	r0, #0
   d5702:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5704:	f7ff ffb0 	bl	d5668 <_Z19__fetch_global_Wirev>
   d5708:	f7ff f93c 	bl	d4984 <_ZN7TwoWire9isEnabledEv>
   d570c:	b108      	cbz	r0, d5712 <pinAvailable+0x26>
   d570e:	2c01      	cmp	r4, #1
   d5710:	d9f6      	bls.n	d5700 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5712:	f7ff fe5d 	bl	d53d0 <_Z22__fetch_global_Serial1v>
   d5716:	f7ff fe57 	bl	d53c8 <_ZN11USARTSerial9isEnabledEv>
   d571a:	b118      	cbz	r0, d5724 <pinAvailable+0x38>
   d571c:	f1a4 0309 	sub.w	r3, r4, #9
   d5720:	2b01      	cmp	r3, #1
   d5722:	d9ed      	bls.n	d5700 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5724:	2c23      	cmp	r4, #35	; 0x23
   d5726:	bf8c      	ite	hi
   d5728:	2000      	movhi	r0, #0
   d572a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d572c:	bd10      	pop	{r4, pc}
   d572e:	bf00      	nop
   d5730:	2003e730 	.word	0x2003e730

000d5734 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5734:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5736:	b538      	push	{r3, r4, r5, lr}
   d5738:	4604      	mov	r4, r0
   d573a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d573c:	d80a      	bhi.n	d5754 <pinMode+0x20>
   d573e:	29ff      	cmp	r1, #255	; 0xff
   d5740:	d008      	beq.n	d5754 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5742:	f7ff ffd3 	bl	d56ec <pinAvailable>
   d5746:	b128      	cbz	r0, d5754 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5748:	4629      	mov	r1, r5
   d574a:	4620      	mov	r0, r4
}
   d574c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5750:	f7fe be30 	b.w	d43b4 <HAL_Pin_Mode>
   d5754:	bd38      	pop	{r3, r4, r5, pc}

000d5756 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5756:	b538      	push	{r3, r4, r5, lr}
   d5758:	4604      	mov	r4, r0
   d575a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d575c:	f7fe fe32 	bl	d43c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5760:	28ff      	cmp	r0, #255	; 0xff
   d5762:	d010      	beq.n	d5786 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5764:	2806      	cmp	r0, #6
   d5766:	d804      	bhi.n	d5772 <digitalWrite+0x1c>
   d5768:	234d      	movs	r3, #77	; 0x4d
   d576a:	fa23 f000 	lsr.w	r0, r3, r0
   d576e:	07c3      	lsls	r3, r0, #31
   d5770:	d409      	bmi.n	d5786 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5772:	4620      	mov	r0, r4
   d5774:	f7ff ffba 	bl	d56ec <pinAvailable>
   d5778:	b128      	cbz	r0, d5786 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d577a:	4629      	mov	r1, r5
   d577c:	4620      	mov	r0, r4
}
   d577e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5782:	f7fe be27 	b.w	d43d4 <HAL_GPIO_Write>
   d5786:	bd38      	pop	{r3, r4, r5, pc}

000d5788 <__aeabi_atexit>:
   d5788:	460b      	mov	r3, r1
   d578a:	4601      	mov	r1, r0
   d578c:	4618      	mov	r0, r3
   d578e:	f000 b94d 	b.w	d5a2c <__cxa_atexit>

000d5792 <_ZdlPvj>:
   d5792:	f7fe bc82 	b.w	d409a <_ZdlPv>

000d5796 <_ZSt25__throw_bad_function_callv>:
   d5796:	b508      	push	{r3, lr}
   d5798:	f7fe fee8 	bl	d456c <abort>

000d579c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d579c:	4b18      	ldr	r3, [pc, #96]	; (d5800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d579e:	681a      	ldr	r2, [r3, #0]
   d57a0:	07d1      	lsls	r1, r2, #31
   d57a2:	bf5c      	itt	pl
   d57a4:	2201      	movpl	r2, #1
   d57a6:	601a      	strpl	r2, [r3, #0]
   d57a8:	4b16      	ldr	r3, [pc, #88]	; (d5804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d57aa:	681a      	ldr	r2, [r3, #0]
   d57ac:	07d2      	lsls	r2, r2, #31
   d57ae:	bf5c      	itt	pl
   d57b0:	2201      	movpl	r2, #1
   d57b2:	601a      	strpl	r2, [r3, #0]
   d57b4:	4b14      	ldr	r3, [pc, #80]	; (d5808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d57b6:	681a      	ldr	r2, [r3, #0]
   d57b8:	07d0      	lsls	r0, r2, #31
   d57ba:	bf5c      	itt	pl
   d57bc:	2201      	movpl	r2, #1
   d57be:	601a      	strpl	r2, [r3, #0]
   d57c0:	4b12      	ldr	r3, [pc, #72]	; (d580c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d57c2:	681a      	ldr	r2, [r3, #0]
   d57c4:	07d1      	lsls	r1, r2, #31
   d57c6:	bf5c      	itt	pl
   d57c8:	2201      	movpl	r2, #1
   d57ca:	601a      	strpl	r2, [r3, #0]
   d57cc:	4b10      	ldr	r3, [pc, #64]	; (d5810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d57ce:	681a      	ldr	r2, [r3, #0]
   d57d0:	07d2      	lsls	r2, r2, #31
   d57d2:	bf5c      	itt	pl
   d57d4:	2201      	movpl	r2, #1
   d57d6:	601a      	strpl	r2, [r3, #0]
   d57d8:	4b0e      	ldr	r3, [pc, #56]	; (d5814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d57da:	681a      	ldr	r2, [r3, #0]
   d57dc:	07d0      	lsls	r0, r2, #31
   d57de:	bf5c      	itt	pl
   d57e0:	2201      	movpl	r2, #1
   d57e2:	601a      	strpl	r2, [r3, #0]
   d57e4:	4b0c      	ldr	r3, [pc, #48]	; (d5818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d57e6:	681a      	ldr	r2, [r3, #0]
   d57e8:	07d1      	lsls	r1, r2, #31
   d57ea:	bf5c      	itt	pl
   d57ec:	2201      	movpl	r2, #1
   d57ee:	601a      	strpl	r2, [r3, #0]
   d57f0:	4b0a      	ldr	r3, [pc, #40]	; (d581c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d57f2:	681a      	ldr	r2, [r3, #0]
   d57f4:	07d2      	lsls	r2, r2, #31
   d57f6:	bf5c      	itt	pl
   d57f8:	2201      	movpl	r2, #1
   d57fa:	601a      	strpl	r2, [r3, #0]
   d57fc:	4770      	bx	lr
   d57fe:	bf00      	nop
   d5800:	2003e76c 	.word	0x2003e76c
   d5804:	2003e768 	.word	0x2003e768
   d5808:	2003e764 	.word	0x2003e764
   d580c:	2003e760 	.word	0x2003e760
   d5810:	2003e75c 	.word	0x2003e75c
   d5814:	2003e758 	.word	0x2003e758
   d5818:	2003e754 	.word	0x2003e754
   d581c:	2003e750 	.word	0x2003e750

000d5820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5820:	4b24      	ldr	r3, [pc, #144]	; (d58b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5822:	681a      	ldr	r2, [r3, #0]
   d5824:	07d0      	lsls	r0, r2, #31
   d5826:	bf5c      	itt	pl
   d5828:	2201      	movpl	r2, #1
   d582a:	601a      	strpl	r2, [r3, #0]
   d582c:	4b22      	ldr	r3, [pc, #136]	; (d58b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d582e:	681a      	ldr	r2, [r3, #0]
   d5830:	07d1      	lsls	r1, r2, #31
   d5832:	bf5c      	itt	pl
   d5834:	2201      	movpl	r2, #1
   d5836:	601a      	strpl	r2, [r3, #0]
   d5838:	4b20      	ldr	r3, [pc, #128]	; (d58bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d583a:	681a      	ldr	r2, [r3, #0]
   d583c:	07d2      	lsls	r2, r2, #31
   d583e:	bf5c      	itt	pl
   d5840:	2201      	movpl	r2, #1
   d5842:	601a      	strpl	r2, [r3, #0]
   d5844:	4b1e      	ldr	r3, [pc, #120]	; (d58c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5846:	681a      	ldr	r2, [r3, #0]
   d5848:	07d0      	lsls	r0, r2, #31
   d584a:	bf5c      	itt	pl
   d584c:	2201      	movpl	r2, #1
   d584e:	601a      	strpl	r2, [r3, #0]
   d5850:	4b1c      	ldr	r3, [pc, #112]	; (d58c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5852:	681a      	ldr	r2, [r3, #0]
   d5854:	07d1      	lsls	r1, r2, #31
   d5856:	bf5c      	itt	pl
   d5858:	2201      	movpl	r2, #1
   d585a:	601a      	strpl	r2, [r3, #0]
   d585c:	4b1a      	ldr	r3, [pc, #104]	; (d58c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d585e:	681a      	ldr	r2, [r3, #0]
   d5860:	07d2      	lsls	r2, r2, #31
   d5862:	bf5c      	itt	pl
   d5864:	2201      	movpl	r2, #1
   d5866:	601a      	strpl	r2, [r3, #0]
   d5868:	4b18      	ldr	r3, [pc, #96]	; (d58cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d586a:	681a      	ldr	r2, [r3, #0]
   d586c:	07d0      	lsls	r0, r2, #31
   d586e:	bf5c      	itt	pl
   d5870:	2201      	movpl	r2, #1
   d5872:	601a      	strpl	r2, [r3, #0]
   d5874:	4b16      	ldr	r3, [pc, #88]	; (d58d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5876:	681a      	ldr	r2, [r3, #0]
   d5878:	07d1      	lsls	r1, r2, #31
   d587a:	bf5c      	itt	pl
   d587c:	2201      	movpl	r2, #1
   d587e:	601a      	strpl	r2, [r3, #0]
   d5880:	4b14      	ldr	r3, [pc, #80]	; (d58d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5882:	681a      	ldr	r2, [r3, #0]
   d5884:	07d2      	lsls	r2, r2, #31
   d5886:	bf5c      	itt	pl
   d5888:	2201      	movpl	r2, #1
   d588a:	601a      	strpl	r2, [r3, #0]
   d588c:	4b12      	ldr	r3, [pc, #72]	; (d58d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d588e:	681a      	ldr	r2, [r3, #0]
   d5890:	07d0      	lsls	r0, r2, #31
   d5892:	bf5c      	itt	pl
   d5894:	2201      	movpl	r2, #1
   d5896:	601a      	strpl	r2, [r3, #0]
   d5898:	4b10      	ldr	r3, [pc, #64]	; (d58dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d589a:	681a      	ldr	r2, [r3, #0]
   d589c:	07d1      	lsls	r1, r2, #31
   d589e:	bf5c      	itt	pl
   d58a0:	2201      	movpl	r2, #1
   d58a2:	601a      	strpl	r2, [r3, #0]
   d58a4:	4b0e      	ldr	r3, [pc, #56]	; (d58e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d58a6:	681a      	ldr	r2, [r3, #0]
   d58a8:	07d2      	lsls	r2, r2, #31
   d58aa:	bf5c      	itt	pl
   d58ac:	2201      	movpl	r2, #1
   d58ae:	601a      	strpl	r2, [r3, #0]
   d58b0:	4770      	bx	lr
   d58b2:	bf00      	nop
   d58b4:	2003e79c 	.word	0x2003e79c
   d58b8:	2003e798 	.word	0x2003e798
   d58bc:	2003e794 	.word	0x2003e794
   d58c0:	2003e790 	.word	0x2003e790
   d58c4:	2003e78c 	.word	0x2003e78c
   d58c8:	2003e788 	.word	0x2003e788
   d58cc:	2003e784 	.word	0x2003e784
   d58d0:	2003e780 	.word	0x2003e780
   d58d4:	2003e77c 	.word	0x2003e77c
   d58d8:	2003e778 	.word	0x2003e778
   d58dc:	2003e774 	.word	0x2003e774
   d58e0:	2003e770 	.word	0x2003e770

000d58e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d58e4:	4b24      	ldr	r3, [pc, #144]	; (d5978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d58e6:	681a      	ldr	r2, [r3, #0]
   d58e8:	07d0      	lsls	r0, r2, #31
   d58ea:	bf5c      	itt	pl
   d58ec:	2201      	movpl	r2, #1
   d58ee:	601a      	strpl	r2, [r3, #0]
   d58f0:	4b22      	ldr	r3, [pc, #136]	; (d597c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d58f2:	681a      	ldr	r2, [r3, #0]
   d58f4:	07d1      	lsls	r1, r2, #31
   d58f6:	bf5c      	itt	pl
   d58f8:	2201      	movpl	r2, #1
   d58fa:	601a      	strpl	r2, [r3, #0]
   d58fc:	4b20      	ldr	r3, [pc, #128]	; (d5980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d58fe:	681a      	ldr	r2, [r3, #0]
   d5900:	07d2      	lsls	r2, r2, #31
   d5902:	bf5c      	itt	pl
   d5904:	2201      	movpl	r2, #1
   d5906:	601a      	strpl	r2, [r3, #0]
   d5908:	4b1e      	ldr	r3, [pc, #120]	; (d5984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d590a:	681a      	ldr	r2, [r3, #0]
   d590c:	07d0      	lsls	r0, r2, #31
   d590e:	bf5c      	itt	pl
   d5910:	2201      	movpl	r2, #1
   d5912:	601a      	strpl	r2, [r3, #0]
   d5914:	4b1c      	ldr	r3, [pc, #112]	; (d5988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5916:	681a      	ldr	r2, [r3, #0]
   d5918:	07d1      	lsls	r1, r2, #31
   d591a:	bf5c      	itt	pl
   d591c:	2201      	movpl	r2, #1
   d591e:	601a      	strpl	r2, [r3, #0]
   d5920:	4b1a      	ldr	r3, [pc, #104]	; (d598c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5922:	681a      	ldr	r2, [r3, #0]
   d5924:	07d2      	lsls	r2, r2, #31
   d5926:	bf5c      	itt	pl
   d5928:	2201      	movpl	r2, #1
   d592a:	601a      	strpl	r2, [r3, #0]
   d592c:	4b18      	ldr	r3, [pc, #96]	; (d5990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d592e:	681a      	ldr	r2, [r3, #0]
   d5930:	07d0      	lsls	r0, r2, #31
   d5932:	bf5c      	itt	pl
   d5934:	2201      	movpl	r2, #1
   d5936:	601a      	strpl	r2, [r3, #0]
   d5938:	4b16      	ldr	r3, [pc, #88]	; (d5994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d593a:	681a      	ldr	r2, [r3, #0]
   d593c:	07d1      	lsls	r1, r2, #31
   d593e:	bf5c      	itt	pl
   d5940:	2201      	movpl	r2, #1
   d5942:	601a      	strpl	r2, [r3, #0]
   d5944:	4b14      	ldr	r3, [pc, #80]	; (d5998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5946:	681a      	ldr	r2, [r3, #0]
   d5948:	07d2      	lsls	r2, r2, #31
   d594a:	bf5c      	itt	pl
   d594c:	2201      	movpl	r2, #1
   d594e:	601a      	strpl	r2, [r3, #0]
   d5950:	4b12      	ldr	r3, [pc, #72]	; (d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5952:	681a      	ldr	r2, [r3, #0]
   d5954:	07d0      	lsls	r0, r2, #31
   d5956:	bf5c      	itt	pl
   d5958:	2201      	movpl	r2, #1
   d595a:	601a      	strpl	r2, [r3, #0]
   d595c:	4b10      	ldr	r3, [pc, #64]	; (d59a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d595e:	681a      	ldr	r2, [r3, #0]
   d5960:	07d1      	lsls	r1, r2, #31
   d5962:	bf5c      	itt	pl
   d5964:	2201      	movpl	r2, #1
   d5966:	601a      	strpl	r2, [r3, #0]
   d5968:	4b0e      	ldr	r3, [pc, #56]	; (d59a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d596a:	681a      	ldr	r2, [r3, #0]
   d596c:	07d2      	lsls	r2, r2, #31
   d596e:	bf5c      	itt	pl
   d5970:	2201      	movpl	r2, #1
   d5972:	601a      	strpl	r2, [r3, #0]
   d5974:	4770      	bx	lr
   d5976:	bf00      	nop
   d5978:	2003e7cc 	.word	0x2003e7cc
   d597c:	2003e7c8 	.word	0x2003e7c8
   d5980:	2003e7c4 	.word	0x2003e7c4
   d5984:	2003e7c0 	.word	0x2003e7c0
   d5988:	2003e7bc 	.word	0x2003e7bc
   d598c:	2003e7b8 	.word	0x2003e7b8
   d5990:	2003e7b4 	.word	0x2003e7b4
   d5994:	2003e7b0 	.word	0x2003e7b0
   d5998:	2003e7ac 	.word	0x2003e7ac
   d599c:	2003e7a8 	.word	0x2003e7a8
   d59a0:	2003e7a4 	.word	0x2003e7a4
   d59a4:	2003e7a0 	.word	0x2003e7a0

000d59a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d59a8:	4b18      	ldr	r3, [pc, #96]	; (d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d59aa:	681a      	ldr	r2, [r3, #0]
   d59ac:	07d1      	lsls	r1, r2, #31
   d59ae:	bf5c      	itt	pl
   d59b0:	2201      	movpl	r2, #1
   d59b2:	601a      	strpl	r2, [r3, #0]
   d59b4:	4b16      	ldr	r3, [pc, #88]	; (d5a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d59b6:	681a      	ldr	r2, [r3, #0]
   d59b8:	07d2      	lsls	r2, r2, #31
   d59ba:	bf5c      	itt	pl
   d59bc:	2201      	movpl	r2, #1
   d59be:	601a      	strpl	r2, [r3, #0]
   d59c0:	4b14      	ldr	r3, [pc, #80]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d0      	lsls	r0, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b12      	ldr	r3, [pc, #72]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d1      	lsls	r1, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b10      	ldr	r3, [pc, #64]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d2      	lsls	r2, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b0e      	ldr	r3, [pc, #56]	; (d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d0      	lsls	r0, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b0c      	ldr	r3, [pc, #48]	; (d5a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d1      	lsls	r1, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4b0a      	ldr	r3, [pc, #40]	; (d5a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d59fe:	681a      	ldr	r2, [r3, #0]
   d5a00:	07d2      	lsls	r2, r2, #31
   d5a02:	bf5c      	itt	pl
   d5a04:	2201      	movpl	r2, #1
   d5a06:	601a      	strpl	r2, [r3, #0]
   d5a08:	4770      	bx	lr
   d5a0a:	bf00      	nop
   d5a0c:	2003e7ec 	.word	0x2003e7ec
   d5a10:	2003e7e8 	.word	0x2003e7e8
   d5a14:	2003e7e4 	.word	0x2003e7e4
   d5a18:	2003e7e0 	.word	0x2003e7e0
   d5a1c:	2003e7dc 	.word	0x2003e7dc
   d5a20:	2003e7d8 	.word	0x2003e7d8
   d5a24:	2003e7d4 	.word	0x2003e7d4
   d5a28:	2003e7d0 	.word	0x2003e7d0

000d5a2c <__cxa_atexit>:
   d5a2c:	b510      	push	{r4, lr}
   d5a2e:	4c05      	ldr	r4, [pc, #20]	; (d5a44 <__cxa_atexit+0x18>)
   d5a30:	4613      	mov	r3, r2
   d5a32:	b12c      	cbz	r4, d5a40 <__cxa_atexit+0x14>
   d5a34:	460a      	mov	r2, r1
   d5a36:	4601      	mov	r1, r0
   d5a38:	2002      	movs	r0, #2
   d5a3a:	f3af 8000 	nop.w
   d5a3e:	bd10      	pop	{r4, pc}
   d5a40:	4620      	mov	r0, r4
   d5a42:	bd10      	pop	{r4, pc}
   d5a44:	00000000 	.word	0x00000000

000d5a48 <memcpy>:
   d5a48:	b510      	push	{r4, lr}
   d5a4a:	1e43      	subs	r3, r0, #1
   d5a4c:	440a      	add	r2, r1
   d5a4e:	4291      	cmp	r1, r2
   d5a50:	d004      	beq.n	d5a5c <memcpy+0x14>
   d5a52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5a56:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5a5a:	e7f8      	b.n	d5a4e <memcpy+0x6>
   d5a5c:	bd10      	pop	{r4, pc}

000d5a5e <memset>:
   d5a5e:	4402      	add	r2, r0
   d5a60:	4603      	mov	r3, r0
   d5a62:	4293      	cmp	r3, r2
   d5a64:	d002      	beq.n	d5a6c <memset+0xe>
   d5a66:	f803 1b01 	strb.w	r1, [r3], #1
   d5a6a:	e7fa      	b.n	d5a62 <memset+0x4>
   d5a6c:	4770      	bx	lr
	...

000d5a70 <srand>:
   d5a70:	b538      	push	{r3, r4, r5, lr}
   d5a72:	4b12      	ldr	r3, [pc, #72]	; (d5abc <srand+0x4c>)
   d5a74:	681c      	ldr	r4, [r3, #0]
   d5a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5a78:	4605      	mov	r5, r0
   d5a7a:	b9d3      	cbnz	r3, d5ab2 <srand+0x42>
   d5a7c:	2018      	movs	r0, #24
   d5a7e:	f7fe fd5d 	bl	d453c <malloc>
   d5a82:	f243 330e 	movw	r3, #13070	; 0x330e
   d5a86:	63a0      	str	r0, [r4, #56]	; 0x38
   d5a88:	8003      	strh	r3, [r0, #0]
   d5a8a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5a8e:	8043      	strh	r3, [r0, #2]
   d5a90:	f241 2334 	movw	r3, #4660	; 0x1234
   d5a94:	8083      	strh	r3, [r0, #4]
   d5a96:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5a9a:	80c3      	strh	r3, [r0, #6]
   d5a9c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5aa0:	8103      	strh	r3, [r0, #8]
   d5aa2:	2305      	movs	r3, #5
   d5aa4:	8143      	strh	r3, [r0, #10]
   d5aa6:	230b      	movs	r3, #11
   d5aa8:	8183      	strh	r3, [r0, #12]
   d5aaa:	2201      	movs	r2, #1
   d5aac:	2300      	movs	r3, #0
   d5aae:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5ab4:	2200      	movs	r2, #0
   d5ab6:	611d      	str	r5, [r3, #16]
   d5ab8:	615a      	str	r2, [r3, #20]
   d5aba:	bd38      	pop	{r3, r4, r5, pc}
   d5abc:	2003e3b8 	.word	0x2003e3b8

000d5ac0 <rand>:
   d5ac0:	4b19      	ldr	r3, [pc, #100]	; (d5b28 <rand+0x68>)
   d5ac2:	b510      	push	{r4, lr}
   d5ac4:	681c      	ldr	r4, [r3, #0]
   d5ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5ac8:	b9d3      	cbnz	r3, d5b00 <rand+0x40>
   d5aca:	2018      	movs	r0, #24
   d5acc:	f7fe fd36 	bl	d453c <malloc>
   d5ad0:	f243 330e 	movw	r3, #13070	; 0x330e
   d5ad4:	63a0      	str	r0, [r4, #56]	; 0x38
   d5ad6:	8003      	strh	r3, [r0, #0]
   d5ad8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5adc:	8043      	strh	r3, [r0, #2]
   d5ade:	f241 2334 	movw	r3, #4660	; 0x1234
   d5ae2:	8083      	strh	r3, [r0, #4]
   d5ae4:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5ae8:	80c3      	strh	r3, [r0, #6]
   d5aea:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5aee:	8103      	strh	r3, [r0, #8]
   d5af0:	2305      	movs	r3, #5
   d5af2:	8143      	strh	r3, [r0, #10]
   d5af4:	230b      	movs	r3, #11
   d5af6:	8183      	strh	r3, [r0, #12]
   d5af8:	2201      	movs	r2, #1
   d5afa:	2300      	movs	r3, #0
   d5afc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5b00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5b02:	4c0a      	ldr	r4, [pc, #40]	; (d5b2c <rand+0x6c>)
   d5b04:	690b      	ldr	r3, [r1, #16]
   d5b06:	6948      	ldr	r0, [r1, #20]
   d5b08:	4a09      	ldr	r2, [pc, #36]	; (d5b30 <rand+0x70>)
   d5b0a:	435c      	muls	r4, r3
   d5b0c:	fb02 4000 	mla	r0, r2, r0, r4
   d5b10:	fba3 2302 	umull	r2, r3, r3, r2
   d5b14:	3201      	adds	r2, #1
   d5b16:	4403      	add	r3, r0
   d5b18:	f143 0300 	adc.w	r3, r3, #0
   d5b1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d5b20:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d5b24:	bd10      	pop	{r4, pc}
   d5b26:	bf00      	nop
   d5b28:	2003e3b8 	.word	0x2003e3b8
   d5b2c:	5851f42d 	.word	0x5851f42d
   d5b30:	4c957f2d 	.word	0x4c957f2d

000d5b34 <strdup>:
   d5b34:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <strdup+0xc>)
   d5b36:	4601      	mov	r1, r0
   d5b38:	6818      	ldr	r0, [r3, #0]
   d5b3a:	f000 b803 	b.w	d5b44 <_strdup_r>
   d5b3e:	bf00      	nop
   d5b40:	2003e3b8 	.word	0x2003e3b8

000d5b44 <_strdup_r>:
   d5b44:	b570      	push	{r4, r5, r6, lr}
   d5b46:	4606      	mov	r6, r0
   d5b48:	4608      	mov	r0, r1
   d5b4a:	460c      	mov	r4, r1
   d5b4c:	f000 f80d 	bl	d5b6a <strlen>
   d5b50:	1c45      	adds	r5, r0, #1
   d5b52:	4629      	mov	r1, r5
   d5b54:	4630      	mov	r0, r6
   d5b56:	f7fe fd11 	bl	d457c <_malloc_r>
   d5b5a:	4606      	mov	r6, r0
   d5b5c:	b118      	cbz	r0, d5b66 <_strdup_r+0x22>
   d5b5e:	462a      	mov	r2, r5
   d5b60:	4621      	mov	r1, r4
   d5b62:	f7ff ff71 	bl	d5a48 <memcpy>
   d5b66:	4630      	mov	r0, r6
   d5b68:	bd70      	pop	{r4, r5, r6, pc}

000d5b6a <strlen>:
   d5b6a:	4603      	mov	r3, r0
   d5b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b70:	2a00      	cmp	r2, #0
   d5b72:	d1fb      	bne.n	d5b6c <strlen+0x2>
   d5b74:	1a18      	subs	r0, r3, r0
   d5b76:	3801      	subs	r0, #1
   d5b78:	4770      	bx	lr

000d5b7a <link_code_end>:
	...

000d5b7c <dynalib_user>:
   d5b7c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5b8c:	0000 0000 6863 6e61 656e 2d6c 6e6f 0065     ....channel-one.
   d5b9c:	6863 6e61 656e 2d6c 7774 006f               channel-two.

000d5ba8 <_ZTVN5spark12NetworkClassE>:
	...
   d5bb0:	459f 000d 45a9 000d 45b3 000d 45bd 000d     .E...E...E...E..
   d5bc0:	45c7 000d 45d3 000d 45df 000d 45eb 000d     .E...E...E...E..
   d5bd0:	45f3 000d 45fd 000d 4607 000d               .E...E...F..

000d5bdc <_ZTVN5spark9WiFiClassE>:
	...
   d5be4:	4747 000d 473d 000d 4733 000d 46e9 000d     GG..=G..3G...F..
   d5bf4:	4727 000d 471b 000d 470f 000d 4707 000d     'G...G...G...G..
   d5c04:	46fd 000d 46f3 000d 4607 000d               .F...F...F..

000d5c10 <_ZTVN5spark9MeshClassE>:
	...
   d5c18:	47c3 000d 47b9 000d 47af 000d 47a5 000d     .G...G...G...G..
   d5c28:	4799 000d 478d 000d 4781 000d 4779 000d     .G...G...G..yG..
   d5c38:	476f 000d 4765 000d 4607 000d               oG..eG...F..

000d5c44 <_ZTV7TwoWire>:
	...
   d5c4c:	4907 000d 4951 000d 4929 000d 4909 000d     .I..QI..)I...I..
   d5c5c:	4931 000d 4939 000d 4941 000d 4949 000d     1I..9I..AI..II..

000d5c6c <_ZTV9USBSerial>:
	...
   d5c74:	499f 000d 49ef 000d 49fd 000d 5259 000d     .I...I...I..YR..
   d5c84:	49db 000d 49a1 000d 49b7 000d 49e9 000d     .I...I...I...I..
   d5c94:	49cd 000d 499b 000d                         .I...I..

000d5c9c <_ZTV9IPAddress>:
	...
   d5ca4:	4ab5 000d 4aa5 000d 4aa7 000d               .J...J...J..

000d5cb0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5cb8:	4b89 000d 4b8f 000d 4bd3 000d 4b9d 000d     .K...K...K...K..
   d5cc8:	4b8b 000d 005a 2b25 3330 3a64 3025 7532     .K..Z.%+03d:%02u
   d5cd8:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d5ce8:	5325 7a25 6100 6373 6974 656d 6200 7561     %S%z.asctime.bau
   d5cf8:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d5d08:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d5d18:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d5d28:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d5d38:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d5d48:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d5d58:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d5d68:	7061 0070 3025 3031 2075 5d00 0020 6425     app.%010u .] .%d
   d5d78:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   d5d88:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   d5d98:	0020 0a0d 6600 6c00 006e 6e66 6300 646f      ....f.ln.fn.cod
   d5da8:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
   d5db8:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
   d5dc8:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

000d5dd8 <_ZTV11USARTSerial>:
	...
   d5de0:	5319 000d 5369 000d 5377 000d 5259 000d     .S..iS..wS..YR..
   d5df0:	532d 000d 534f 000d 533b 000d 5363 000d     -S..OS..;S..cS..
   d5e00:	531b 000d 531f 000d                         .S...S..

000d5e08 <_ZTV8SPIClass>:
	...
   d5e10:	54d5 000d 54d7 000d                         .T...T..

000d5e18 <_ZTVN5spark13EthernetClassE>:
	...
   d5e20:	5571 000d 5567 000d 555d 000d 5553 000d     qU..gU..]U..SU..
   d5e30:	5547 000d 553b 000d 552f 000d 5527 000d     GU..;U../U..'U..
   d5e40:	551d 000d 5513 000d 4607 000d               .U...U...F..

000d5e4c <__sf_fake_stdin>:
	...

000d5e6c <__sf_fake_stdout>:
	...

000d5e8c <__sf_fake_stderr>:
	...
   d5eac:	0043                                        C.

000d5eae <link_const_variable_data_end>:
	...

000d5eb0 <link_constructors_location>:
   d5eb0:	000d41a5 	.word	0x000d41a5
   d5eb4:	000d46d5 	.word	0x000d46d5
   d5eb8:	000d4751 	.word	0x000d4751
   d5ebc:	000d4879 	.word	0x000d4879
   d5ec0:	000d5211 	.word	0x000d5211
   d5ec4:	000d5235 	.word	0x000d5235
   d5ec8:	000d5249 	.word	0x000d5249
   d5ecc:	000d5309 	.word	0x000d5309
   d5ed0:	000d54bd 	.word	0x000d54bd
   d5ed4:	000d557d 	.word	0x000d557d
   d5ed8:	000d56a9 	.word	0x000d56a9
   d5edc:	000d579d 	.word	0x000d579d
   d5ee0:	000d5821 	.word	0x000d5821
   d5ee4:	000d58e5 	.word	0x000d58e5
   d5ee8:	000d59a9 	.word	0x000d59a9

000d5eec <link_constructors_end>:
   d5eec:	00000000 	.word	0x00000000
